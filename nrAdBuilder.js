




/* norisk DANGER ZONE: You have taken this too far.

- If you tried to log this into the Ads Scripts console, it's not going to work with the 100k char logger limit
- If you managed to log this into to the browser (good job finding the UserAgent), the core business logic is uglified and impossible to reverse engineer

NOTE: This specific request is logged via Google Analytics including the Ads account ID and will trigger an alert on behalf of norisk.




                            uuuuuuu
                         uu$$$$$$$$$$$uu
                      uu$$$$$$$$$$$$$$$$$uu
                     u$$$$$$$$$$$$$$$$$$$$$u
                    u$$$$$$$$$$$$$$$$$$$$$$$u
                   u$$$$$$$$$$$$$$$$$$$$$$$$$u
                   u$$$$$$$$$$$$$$$$$$$$$$$$$u
                   u$$$$$$"   "$$$"   "$$$$$$u
                   "$$$$"      u$u       $$$$"
                    $$$u       u$u       u$$$
                    $$$u      u$$$u      u$$$
                     "$$$$uu$$$   $$$uu$$$$"
                      "$$$$$$$"   "$$$$$$$"
                        u$$$$$$$u$$$$$$$u
                         u$"$"$"$"$"$"$u
              uuu        $$u$ $ $ $ $u$$       uuu
             u$$$$        $$$$$u$u$u$$$       u$$$$
              $$$$$uu      "$$$$$$$$$"     uu$$$$$$
            u$$$$$$$$$$$uu    """""    uuuu$$$$$$$$$$
            $$$$"""$$$$$$$$$$uuu   uu$$$$$$$$$"""$$$"
             """      ""$$$$$$$$$$$uu ""$"""
                       uuuu ""$$$$$$$$$$uuu
              u$$$uuu$$$$$$$$$uu ""$$$$$$$$$$$uuu$$$
              $$$$$$$$$$""""           ""$$$$$$$$$$$"
               "$$$$$"                      ""$$$$""
                 $$$"                         $$$$"


/************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/



/****************************************************/
/************* GLOBAL CONSTANTS *********************/
/****************************************************/


var ERROR_LOG = [];
var ADGROUP_CREATION_LOG = [];
var ERROR_SUMMARY_OBJECT = {"missingCampaigns": 0, "adGroupErrorCount": 0, "adErrorCount": 0, "keywordErrorCount": 0, "negativeKeywordErrorCount": 0, "sitelinkErrorCount": 0}; // Leave empty! Will be filled in each step
var SITELINK_CREATION_LOG = [];
var TIME_STAMP; // Leave empty
var START_TIME = new Date();

var POLICY_ERROR_LABELS = {
  "keyword" : "policy_Err_Keyword",
  "ad" : "policy_Err_Ad"
};
var DUPLICATE_KW_LABELS = {
  "sameMatchtype_new" : "DuplKW_SameMt_New",
  "sameMatchtype_legacy" : "DuplKW_SameMt_Legacy"
};

ADGROUP_STATUS_LABELS = typeof ADGROUP_STATUS_LABELS == "undefined" ? {"ENABLED" : "Activated_by_nrFeedCamps", "PAUSED" : "Paused_by_nrFeedCamps"} : ADGROUP_STATUS_LABELS;

var SET_SITELINKS = typeof SITELINK_BUILDER_CONFIG.setSitelinks == "undefined" ? 1 : SITELINK_BUILDER_CONFIG.setSitelinks;
var AD_TEMPLATE_HEADER_VALUES = ["Static Std", "Param Std", "Static Sale","Param Sale", "Param Custom"];
var INPUT_SOURCE_MODE = "ADBUILD";

/***************************************************/
/*********** START MAIN BUSINESS LOGIC  ************/
/***************************************************/


function nrCampaignBuilder(feedContent) {

  INPUT_SOURCE_MODE = typeof feedContent == "undefined" ? "ADBUILD" : "SQA";
  Logger.log("INPUT_SOURCE_MODE : " + INPUT_SOURCE_MODE); Logger.log(" ");

  // Log GA event
  init();

  // Prepate Error Logging
  var errorLogger = new ErrorLogger(SCRIPT_NAME);
  TIME_STAMP = errorLogger.getTimeStamp();
  var campaignList = [];
  var columnMapper, campaignHandler;
  var feedContent = typeof feedContent == "undefined" ? Utilities.parseCsv(UrlFetchApp.fetch(FEED_URL), COLUMN_SEPARATOR) : feedContent;

  // Handle Feedcamp/SQA Dependencies, PART I
  if(INPUT_SOURCE_MODE === "ADBUILD") {var configValidator = new ConfigValidator(feedContent, AD_SPREADSHEET_ID);} // Validate Configuration values (singleton)

  if(INPUT_SOURCE_MODE === "SQA") { Logger.log("FEED_CONTENT example, first row : " + feedContent[1]);}

  columnMapper = new FeedColumnValidator(feedContent,REQUIRED_COLUMNS,EXTRA_COLUMNS).getColumnMapper(); // 1.1 Get campaign list
  campaignHandler = new CampaignHandler(columnMapper, feedContent);
  campaignList = campaignHandler.getCampaignNames();

  var campaignSettingService = new CampaignSettingUpdateService();
  campaignSettingService.updateCampaigns();

  var adgroupStorageHandler = new StorageHandler();
  adgroupStorageHandler.initDb("adGroups", adgroupStorageHandler.generateFieldSchemaArray());
  var sitelinkStorageHandler = new StorageHandler();
  sitelinkStorageHandler.initDb("adGroup_sitelinks", sitelinkStorageHandler.generateFieldSchemaArray());


  // Pausing ALL adgroups if campaigns are missing in feed
  /*if(INPUT_SOURCE_MODE === "ADBUILD") {
		campaignSettingService.findCampaignsNotInScope();
		var campaignsNotInFeed = campaignHandler.getCampaignsNotInFeed();
		campaignHandler.pauseAdGroupsOfCampaignsByName(campaignsNotInFeed);

		for(var k = 0; k < campaignsNotInFeed.length; k++) {
			var missingCampAgHandler = new AdGroupHandler(campaignsNotInFeed[k]);
			var activeAdGroups = new AdGroupList(missingCampAgHandler.getByStatus("ENABLED")).getList();
			Logger.log(activeAdGroups);
			missingCampAgHandler.setStatus(activeAdGroups, "PAUSED");
		}
  }*/


  ////////
  // START Campaign Iterator
  ////////

  for (var i = 0; i < campaignList.length; i++) {

    // Limit number of campaign iterations by execution time
    var minutesRemaining = AdsApp.getExecutionInfo().getRemainingTime()/60;
    if (minutesRemaining < 5) {Logger.log("Execution time past twentyfive minutes. Stopping execution..."); break;}

    var campaignName = campaignList[i];
    Logger.log(" "); Logger.log(" "); Logger.log("**********"); Logger.log("STARTING ENTITY CREATION for : " + campaignList[i]); Logger.log("**********"); Logger.log(" ");

    var newSlicedAdGroups = [];
    var fullAdGroupObjects, toBePausedAdGroups, toBeActiveAdGroups;
    var adGroupHandler = new AdGroupHandler(campaignName);

    // 1.2 Get feed data per campaign
    var feedHandler = new FeedHandler(FEED_URL, COLUMN_SEPARATOR, columnMapper, campaignName, feedContent);

    fullAdGroupObjects = feedHandler.getAdGroupObjects();
    var shouldBeActiveAdGroups = new AdGroupList(feedHandler.getAdGroupList(fullAdGroupObjects));

    var saleAdGroups = new AdGroupList(feedHandler.getSaleAdGroupList(fullAdGroupObjects));
    var nonSaleAdGroups = new AdGroupList(feedHandler.getNonSaleAdGroupList(fullAdGroupObjects));

    // 2. Update adgroups & status
    var currentAllAdGroups = new AdGroupList(adGroupHandler.getAll());

    // CG 2019-01-08: NEW extra method "setLabel()" for script-speficic scopes (webworks)
    // Example value : "nrSCOPE_Non-Brand (Vans)"

    if(typeof AG_SCOPE_LABEL_FALLBACK !== "undefined") {
			Logger.log("Applying scope label...");
			adGroupHandler.setScopeLabel(currentAllAdGroups.getList());
		}

    var currentActiveAdGroups = new AdGroupList(adGroupHandler.getByStatus("ENABLED"));
    var currentPausedAdGroups = new AdGroupList(adGroupHandler.getByStatus("PAUSED"));

    if(INPUT_SOURCE_MODE === "ADBUILD"){
      Logger.log("Updating ad group statuses for MODE : " + INPUT_SOURCE_MODE); Logger.log("");
      toBePausedAdGroups = currentActiveAdGroups.returnIfNotFoundIn(shouldBeActiveAdGroups.getList());
      adGroupHandler.setStatus(toBePausedAdGroups, "PAUSED");

      toBeActiveAdGroups = currentPausedAdGroups.returnIfFoundIn(shouldBeActiveAdGroups.getList());
      adGroupHandler.setStatus(toBeActiveAdGroups, "ENABLED");
    }

    // 3. Prepare data for new adgroups
    newSlicedAdGroups = shouldBeActiveAdGroups.returnIfNotFoundIn(currentAllAdGroups.getList()).slice(0,100); // NOTE: Limiting amount to 100 adGroups per run!
    var newAdGroups = new AdGroupList(newSlicedAdGroups);
    var newAdGroupObjects = newAdGroups.getObjectsFrom(fullAdGroupObjects);
    var urlHandler = urlHandler ? urlHandler : new UrlHandler();
    var adTemplates, adTemplateParser2, keywordHandler;



    // RUN CREATE Operations for NEW Adgroups
    if(newSlicedAdGroups.length > 0) {

      // 3.1 Create adgroups - Limiting amount to smaller chunks, 300 adGroups per run
      if(URL_SCHEMA.addParameters == "YES"){urlHandler.evaluateParamSchema(fullAdGroupObjects[0]);}

      // Instantiate AdTemplate parser
      adTemplateParser2 = new AdTemplateParser2(AD_SPREADSHEET_ID, CAMPAIGN_INFO_CONFIG, SET_ADS_CONFIG);
      adTemplateParser2.validateSheetsAndAggregationTypes(fullAdGroupObjects);
      adTemplates = adTemplateParser2.getAllTemplates();

      adGroupHandler.create(newAdGroups.getList(), ADGROUP_DEFAULT_BID, adgroupStorageHandler);

      // 3.2 Create ads, standard or sale, static and param
      var adHandler = new AdHandler(campaignName, newAdGroupObjects, adTemplates);
      adHandler.createExpAdsWithParams(1, urlHandler);
      adHandler.createExpAdsWithParams(0, urlHandler);

      // 4. Creating keywords
      keywordHandler = new KeywordHandler(campaignName, newAdGroupObjects);
      keywordHandler.addKwsWithRelativeBids(NEW_KEYWORD_CONFIG, urlHandler);

      // 4.1 Creating negative keywords
      var negativeKeywordHandler = new NegativeKeywordHandler(campaignName, newAdGroupObjects);
      negativeKeywordHandler.addNegativeKeywordsPerAdGroup();

      if(INPUT_SOURCE_MODE === "SQA") negativeKeywordHandler.addNegativeKeywordToQuerySource();

      // 5. Creating sitelinks
      if(SET_SITELINKS){
        var sitelinkHandler = new SitelinkHandler(campaignName);
        sitelinkHandler.createAdGroupSitelinks(newAdGroupObjects, sitelinkStorageHandler);

        sitelinkHandler.setSitelinkEndDateByStatus(toBePausedAdGroups, "paused", sitelinkStorageHandler);
        sitelinkHandler.setSitelinkEndDateByStatus(toBeActiveAdGroups, "enabled", sitelinkStorageHandler);
      }

      var snippetHandler = new SnippetHandler(campaignName);
      snippetHandler.addSnippets(newAdGroupObjects);

    } // END IF New Adgroups



    if(INPUT_SOURCE_MODE === "ADBUILD"){
    // 6. Missing entity refill
      if(newAdGroupObjects.length > 0) campaignHandler.setNewAndRemoveOldCheckLabels("EntityCheck_TBD", campaignName, "EntityCheck_Complete");

      if(ENTITY_REFILL_CHECK && newAdGroupObjects.length === 0 && campaignHandler.getLabel("EntityCheck_Complete", campaignName) === false) {

        Logger.log(" "); Logger.log("*****"); Logger.log("Starting Missing Entity Refill for campaign " + campaignName); Logger.log(" ");

        if(!adTemplates) {
          adTemplateParser2 = new AdTemplateParser2(AD_SPREADSHEET_ID, CAMPAIGN_INFO_CONFIG, SET_ADS_CONFIG);
          adTemplateParser2.validateSheetsAndAggregationTypes(fullAdGroupObjects);
          adTemplates = adTemplateParser2.getAllTemplates();
        }

        // Add missing keywords
        var adGroupsWithoutKeywords = new AdGroupList(adGroupHandler.getAdGroupsWithout("keywords"));
        var incompleteAdGroupObjects = adGroupsWithoutKeywords.getObjectsFrom(fullAdGroupObjects);
        var fillupKeywordHandler = new KeywordHandler(campaignName, incompleteAdGroupObjects);
        fillupKeywordHandler.addKwsWithRelativeBids(NEW_KEYWORD_CONFIG, urlHandler);

        // Add missing negative keywords
        incompleteAdGroupObjects = undefined; // empty data transfer array
        var adGroupsWithoutNegatives = new AdGroupList(adGroupHandler.getAdGroupsWithout("negatives"));
        incompleteAdGroupObjects = adGroupsWithoutNegatives.getObjectsFrom(fullAdGroupObjects);
        var fillupNegativeKeywordHandler = new NegativeKeywordHandler(campaignName,incompleteAdGroupObjects);
        fillupNegativeKeywordHandler.addNegativeKeywordsPerAdGroup();

        // Add missing param ads
        var adGroupsWithoutParamAds = new AdGroupList(adGroupHandler.getAdGroupsWithout("paramAds"));
        incompleteAdGroupObjects = undefined;
        incompleteAdGroupObjects = adGroupsWithoutParamAds.getObjectsFrom(fullAdGroupObjects);
        var fillupParamAdHandler = new AdHandler(campaignName, incompleteAdGroupObjects, adTemplates);
        fillupParamAdHandler.createExpAdsWithParams(1, urlHandler);

        // Add missing static ads
        var adGroupsWithoutStaticAds = new AdGroupList(adGroupHandler.getAdGroupsWithout("staticAds"));
        incompleteAdGroupObjects = undefined;
        incompleteAdGroupObjects = adGroupsWithoutStaticAds.getObjectsFrom(fullAdGroupObjects);
        var fillupStaticAdHandler = new AdHandler(campaignName, incompleteAdGroupObjects, adTemplates);
        fillupStaticAdHandler.createExpAdsWithParams(0, urlHandler);

        campaignHandler.setNewAndRemoveOldCheckLabels("EntityCheck_Complete",campaignName,"EntityCheck_TBD");
      }
    } // END IF Adbuild


    // Pause non-performing keywords
    // keywordHandler.pauseNonPerformingKeywords_lowCtr();
    if(!keywordHandler) keywordHandler = new KeywordHandler(campaignName, newAdGroupObjects);
    keywordHandler.pauseNonPerformingKeywords_highCost();

    // Generate close variant keywords via Suggest
    if(typeof NEW_KEYWORD_CONFIG.addCloseVariants !== "undefined") keywordHandler.addCloseSuggestVariants();

    // Pause non-serving adgroups and ads
    /*if(INPUT_SOURCE_MODE === "ADBUILD") {
      adGroupHandler.pauseAdGroups_withNonServingKeywords();
      keywordHandler.pauseNonServingKeywords();
    }*/

    // Limiting load in initial creation phase, to prevent multi campaign time-out
    if(newSlicedAdGroups.length === 100) break;

  } // END Campaign Iterator

  // 6. Sending summary email of all caught errors and log to sheet
  errorLogger.writeLogToErrorSheet(AD_SPREADSHEET_ID, ERROR_LOG);
  errorLogger.buildAndSendSingleEmail(EMAIL_RECIPIENTS, TIME_STAMP, ERROR_SUMMARY_OBJECT, AD_SPREADSHEET_ID);
  errorLogger.sendDailyErrorSummary();
}


/***************************************************/
/************ END MAIN BUSINESS LOGIC **************/
/***************************************************/



////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////// PROTOTYPES & METHODS ////////////////////
////////////////////////////////////////////////////////////

/* INDEX of Prototypes
* 0. ErrorLogger: catches all error and sends via email (overview), logs details to sheet and sends an email summary with all errors
* 0. CampaignHandler: gets all required and existing campaigns, returns campaigns to be newly added
* 1. Feedhandler: gets all data necessary from feed, ie campaign, adgroup, keyword, price, discount, sale_items etc
* 2.1 AdGroupHandler: creates, gets and sets by status
* 2.2 AdGrouplist: stores a list and compares it with another
* 3.1 AdTemplateParser: gets data from the ad template spreadsheet
* 3.2 Adhandler: creates ads and handles dispproved ads
* 4. KeywordHandler: adds keywords with calculated bids
* 5. SitelinkHandler: consists of builder and datehandler, to create adgroup-level sitelinks and set end dates
* 6. StorageHandler: persists adgroup statuses and sitelink end dates in BigQuery
* 7. UrlHandler: service to allow custom url building schemata
* 8. SnippetHandler: adds snippets
*
* @TODO: New features, see norisk at SEASEO-548
*/

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

function init() {
  var scriptfile_name = "https://scripts.adserver.cc/getScript.php?package=nrUtils&version=latest&script=index.js&aid=000-111-222-333&key=oWbnQ45R2pSMWx1dhZNhVApTT3O8tTRP";
  var scriptFile_raw =  UrlFetchApp.fetch(scriptfile_name).getContentText(); // this.getFile(scriptfile_name);
  eval(scriptFile_raw);
  var script = new nrTr();
  script.main("nrCampaignBuilder");
}

init.prototype.getFile = function(fileName){
	var file;

	try{
		file = UrlFetchApp.fetch(fileName).getContentText();
	} catch(e) {
		Utilities.sleep(20000);
		file = UrlFetchApp.fetch(fileName).getContentText();
	}
	return file;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 0. ERRORLOGGER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function ErrorLogger(scriptName) {

  this.scriptName = scriptName;

  /*
  * @return string dateTime
  */
  this.getTimeStamp = function() {

    var currentdate = new Date();
    var currrentHourGmc = currentdate.getUTCHours()+1;

    var dateTime =
			(currentdate.getDate() < 10 ? '0' + currentdate.getDate().toString() : currentdate.getDate()) + "." +
      (currentdate.getMonth()+1) + "." +
      currentdate.getFullYear() + " , "  +
      currrentHourGmc + ":"  +
      (currentdate.getMinutes() < 10 ? '0' + currentdate.getMinutes().toString() : currentdate.getMinutes());

    return dateTime;  // target format = '24.2.2017 , 12:09'
  };

  /*
  * @param string spreadsheetId
  * @param array errorLog, 2-dim array of all error entries of current run
  * @return void
  * @throws exception WriteToSheetException
  */
  this.writeLogToErrorSheet = function(spreadsheetId, errorLog) {

    if(!errorLog || errorLog.length === 0) {
      Logger.log(" "); Logger.log("****"); Logger.log("No errors to log. Have a nice Ads day!");
      return;
    }
    try{
      var spreadsheet = SpreadsheetApp.openById(spreadsheetId);
      var errorSheet = spreadsheet.getSheetByName("(errors)");

      var firstFreeRow = this.getLastReportRow(errorSheet);
      var destinationRange = errorSheet.getRange(firstFreeRow, 1, errorLog.length, errorLog[0].length);
      destinationRange.setValues(errorLog);
    } catch(e){
      Logger.log("WriteToSheetException : " + e + " . Error message : " + e.message + ". Stacktrace : " + e.strack);
    }
  };

  /*
  * @param spreadsheet {object}
  * @return {integer}
  */
  this.getLastReportRow = function (singleSheet) {
    var column = singleSheet.getRange('A:A');
    var values = column.getValues(); // get all data in one call
    var ct = 0;
    while ( values[ct] && values[ct][0] !== "" ) {
      ct++;
    }
    return (ct+1);
  };

  /*
  * @param array campaignList
  * @param array recipients
  * @return void
  */
  this.buildAndSendSingleEmail = function(recipients, timeStamp, errorObject, spreadsheetId) {

    var subject = this.scriptName + ': Single Run Errors for ' + timeStamp;
    var body = subject;
    var htmlBody = "<html><body>Dear Google Ads-User,<br><br>Here are the results of your last run:<br>";

    Logger.log(" "); Logger.log("errorObject:" + JSON.stringify(errorObject)); Logger.log("------");

    var campaignList = errorObject.missingCampaigns;

    var adErrors = errorObject.adErrorCount;
    var keywordErrors = errorObject.keywordErrorCount;
    var negativeKeywordErrors = errorObject.negativeKeywordErrorCount;
    var sitelinkErrors = errorObject.sitelinkErrorCount;

    // 0. adding total errors
    var totalErrors = adErrors + keywordErrors + negativeKeywordErrors + sitelinkErrors;
    if(totalErrors > 0) htmlBody += '<br>- Number of TOTAL Errors :' + totalErrors + '<br>';

    // 1. adding entity creation errors
    if(adErrors > 0) htmlBody += '<br>- Number of <b> adErrors (!)</b>:' + adErrors + '<br>';
    if(keywordErrors > 0) htmlBody += '<br>- Number of <b> keyword Errors (!)</b>: ' + keywordErrors + '<br>';
    if(negativeKeywordErrors > 0) htmlBody += '<br>- Number of <b> keyword Errors (!)</b>: ' + negativeKeywordErrors + '<br>';
    if(sitelinkErrors > 0) htmlBody += '<br>- Number of <b> keyword Errors (!)</b>: ' + sitelinkErrors + '<br>';

    htmlBody += '<br>---<br> For further error details, check the error log, tab "(errors)": <br>';
    htmlBody += 'https://docs.google.com/spreadsheets/d/' + spreadsheetId  + '/';
    htmlBody += '<br><br>Happy optimizing!<br>Sincerely, the norisk team<br>';

    var options = { htmlBody : htmlBody };

    for(var i in recipients) {

      // Send no email if all empty
      if(campaignList.length === 0 && adErrors === 0 && keywordErrors === 0) {
        Logger.log("No errors to send via email. Have a nice Ads day!");
        break;
      }
      if(adErrors + keywordErrors + negativeKeywordErrors > SINGLE_ALERT_ERROR_THRESHOLD) {
        MailApp.sendEmail(recipients[i], subject, body, options);
        Logger.log('Email sent to ' + recipients[i]); Logger.log(" ");Logger.log("Have a nice Ads day!");
      }
    } // END FOR LOOP RECIPIENTS
  }; // END buildAndSendEmail

  /*
  * @return void
  * @throws exception ErrorSummaryException
  */
  this.sendDailyErrorSummary = function (){
    try{
      var ss = SpreadsheetApp.openById(AD_SPREADSHEET_ID);
      var spreadsheet = ss.getSheetByName("(errors)");
      var sheetValues = spreadsheet.getRange("a:b").getValues();

      var currentdate = new Date();
      var dateYesterday = currentdate.getDate() + "." + (currentdate.getMonth()+1) + "." + currentdate.getFullYear();

      var errorsOfDay = {
        "total" : 0,
        "keywords" : 0,
        "ads" : 0,
        "negatives" : 0,
      };

      for(var i=0; i<sheetValues.length; i++){
        if(sheetValues[i][0].split(" , ")[0] == dateYesterday){
          errorsOfDay.total ++;
          if(sheetValues[i][1] == "Kw"){errorsOfDay.keywords ++;}
          if(sheetValues[i][1] == "Ad"){errorsOfDay.ads ++;}
          if(sheetValues[i][1] == "Negative Kw"){errorsOfDay.negatives ++;}
        }
      }

      var hourOfDay = new Date().getUTCHours();
      if(hourOfDay === 1 && errorsOfDay.total > DAILY_ALERT_ERROR_THRESHOLD) {
        var subject = this.scriptName + ': Daily Error Summary for ' + dateYesterday;
        var body = subject;
        var htmlBody = "<html><body>Dear Google Ads-User,<br><br>Here are the summarized results of yesterday's runs:<br>";

        Logger.log(" "); Logger.log("errorOfDay:" + JSON.stringify(errorsOfDay)); Logger.log("------");

        htmlBody += '<br>- Summary of <b> Errors (!)</b>:' + JSON.stringify(errorsOfDay) + '<br>';
        htmlBody += '<br>---<br> For further error details, check the error log, tab "(errors)": <br>';
        htmlBody += 'https://docs.google.com/spreadsheets/d/' + spreadsheetId  + '/';
        htmlBody += '<br><br>Happy optimizing!<br>Sincerely, the norisk team<br>';

        var options = { htmlBody : htmlBody };

        for(var i in recipients) {
          MailApp.sendEmail(recipients[i], subject, body, options);
          Logger.log('Summary Email sent to ' + recipients[i]); Logger.log(" ");Logger.log("Have a nice Ads day!");
        }
      }

    } catch(e){ Logger.log("ErrorSummaryException: " + e + " . Stacktrace : " + e.stack);}


  }; // END sendDailyErrorSummary

} // END ERROR HANDLER





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 0. CONFIGVALDIATOR @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ConfigValidator(feedContent, sheetId) {
  this.feedContent = feedContent;
  this.sheetId = sheetId;

  Logger.log("*****"); Logger.log("Starting ConfigValidator: checking config settings for anomalies ..."); Logger.log(" ");

  this.checkSheetAccess();
  this.checkColumnSeparator();
  this.checkFeedUrlFormat();
  this.checkFeed_IfEmpty();
  this.checkCampaign_AllowedMatchTypes();
  this.checkCampaign_AllowedCampaignTypes();
  this.checkNewcamp_LangLocSettingConfig();
  this.checkNewcamp_deviceModifierValues();
  this.checkAdTemplateTextLength();
  this.checkUrlTypeValues();
  this.checkUrladdParamValue();
  this.checkUrlNameInAdGroupObject();
  this.checkAdGroupStatusLabelConfig();
  this.checkNewKeywordConfig_SetUrls();
  this.checkNewKeywordConfig_Matchtypes();
  this.checkNewKeywordConfig_MaxCost();
  this.checkNewKeywordConfig_addCloseVariants();
  this.checkSitelinkFallback_TextLength();
  this.checkSitelinkUrls();
  this.checkUrlPrefixes();
  // this.checkChangedOrNewConfigValues();
  // this.checkMissingConfigValues();
  // this.checkAdTemplatesByConfig();
  // this.checkAdTemplate_Params();
  this.checkAdTemplate_HeaderValues();
  this.checkAdHeadline_CutOffConfig();
  this.checkNonServingElements();

  Logger.log(" "); Logger.log("ConfigValidator Completed: All settings OK. Let's go build some campaigns! "); Logger.log("*****"); Logger.log(" ");
}

/*
* @return void
* @throws {error} SheetAccessError
*/
ConfigValidator.prototype.checkSheetAccess = function(){
  try{
    var spreadsheet = SpreadsheetApp.openById(this.sheetId);
    var errorSheet = spreadsheet.getSheetByName("(errors)");
    errorSheet.getRange("a1:a1");
  } catch (e) {
    throw new Error("SheetAccessError: Please recheck the SheetId OR grant 1. READ AND 2. WRITE (error log) access " +
      "for the current script user to the current spreadsheetId '" + this.sheetId + "' . Please make sure the ID is copied correctly.");
  }
};

/*
* @return void
* @throws {error} ColumnSeparatorError
*/
ConfigValidator.prototype.checkColumnSeparator = function(){
  if(COLUMN_SEPARATOR !== ",") {
    throw new Error("ColumnSeparatorError: Your current column separator value '" + COLUMN_SEPARATOR +
      " MUST be ',' (or COMMA) to work as an Ads business data feed. Please update your feed separator (and make sure strings are enclosed with quotes).");
  }
};

/*
* @return void
* @throws {error} MalformedUrlError
*/
ConfigValidator.prototype.checkFeedUrlFormat = function(){
  try{
    var feedContent = this.feedContent;
    var headerColumn = feedContent[0];
  } catch(e){ throw new Error("MalformedFeedUrlError: Please make sure your FEED_URL is correct, has no typos/spaces and is accessible. Current value : " + FEED_URL);}
};


/*
* @return void
* @throws {error} EmptyFeed_Error
*/
ConfigValidator.prototype.checkFeed_IfEmpty = function(){
  var feedContent = this.feedContent;
  if(feedContent.length === 1) throw new Error("EmptyFeed_Error: Your provided URL only contains a header column. Please make sure your FEED_URL contains multiple data rows : " + FEED_URL);
};

/*
* @return void
* @throws {error} ConfigMisMatchError
* @throws {error} MatchTypeSplitCase_ValueError
*/
ConfigValidator.prototype.checkCampaign_AllowedMatchTypes = function(){

  if(typeof(NEW_CAMPAIGN_CONFIG.matchTypeSplitCase) !== "undefined" && typeof(NEW_CAMPAIGN_CONFIG.allowedMatchTypes) === "undefined"){
    throw new Error("ConfigMisMatchError: Please change the attribute name " +
    "'NEW_CAMPAIGN_CONFIG.matchTypeSplitCase' to '.allowedMatchTypes' . The name was changed for better readability. " +
    "The (case-sensitive) variable values must stay the same: 'exact', 'nonExact' or '-' (two matchtypes per adgroup)");
  }

  if(NEW_CAMPAIGN_CONFIG.allowedMatchTypes){
    if(NEW_CAMPAIGN_CONFIG.splitByMatchType === 1 && NEW_CAMPAIGN_CONFIG.allowedMatchTypes === "all") {
      throw new Error("ConfigMisMatchError: If splitByMatchType = 1, please set .allowedMatchTypes to 'exact' or 'nonExact' ");
    }
  }

  var allowedMatchTypes = NEW_CAMPAIGN_CONFIG.allowedMatchTypes;
  if(allowedMatchTypes !== "exact" && allowedMatchTypes !== "nonExact" && allowedMatchTypes !== "all" && allowedMatchTypes !== "-") {
    throw new Error("AllowedMatchTypes_ValueError: Your current value '" + allowedMatchTypes +
    "' for 'allowedMatchTypes' must match one of the following (case-sensitive) values: 'exact', 'nonExact' or 'all' (two matchtypes per adgroup)");
  }
};

/*
* @return void
* @throws {error} AllowedCampaignTypes_ValueError
*/
ConfigValidator.prototype.checkCampaign_AllowedCampaignTypes = function(){
  var campaignType = CAMPAIGN_INFO_CONFIG["campaign type"];
  if(campaignType !== "brand" &&  campaignType !== "generic" && campaignType !== "sale" && campaignType !== "aggregationType"){
    throw new Error("AllowedCampaignTypes_ValueError: Your current value '" + CAMPAIGN_INFO_CONFIG["campaign type"] +
    "' must match one of the following (case-sensitive) values: 'brand', 'generic', 'sale' or 'aggregationType'. ");
  }
};


ConfigValidator.prototype.checkNewcamp_LangLocSettingConfig = function(){
  if(typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Targeted Locations ID"] === "undefined") {
    Logger.log("MissingTargetedLocation_Exception: Your 'NEW_CAMPAIGN_CONFIG.newcampSettings' config object does not contain an attribute 'Targeted Locations ID'. Example:   'Targeted Locations ID':[2276,2040],    ");
  }
  if(typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Excluded Locations ID"] === "undefined") {
    Logger.log("MissingExcludedLocation_Exception: Your 'NEW_CAMPAIGN_CONFIG.newcampSettings' config object does not contain an attribute 'Excluded Locations ID'. Example:   'Excluded Locations ID':[2756,2535],    ");
  }
};


ConfigValidator.prototype.checkNewcamp_deviceModifierValues = function(){
  if (typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"] === "undefined") {
    Logger.log("MissingDeviceModifier_Exception: Your 'NEW_CAMPAIGN_CONFIG.newcampSettings' config object does not contain an attribute 'Mobile Bid Modifier'. Example:   'Mobile Bid Modifier': 0.75, // = -25%   ");
  }
  if (typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"] === "undefined") {
    Logger.log("MissingDeviceModifier_Exception: Your 'NEW_CAMPAIGN_CONFIG.newcampSettings' config object does not contain an attribute 'Tablet Bid Modifier'. Example:   'Tablet Bid Modifier': 0.90, // = -10%   ");
  }

  if (typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"] !== "undefined") {
    if(NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"] < 0 || NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"] > 3) {
      throw new Error("DeviceModifierValue_Error: Your submitted value for 'Mobile Bid Modifier' must be between 0 and 3, corresponding to the -100% to 300% range.");
    }
  }

  if (typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"] !== "undefined") {
    if(NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"] < 0 || NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"] > 3) {
      throw new Error("DeviceModifierValue_Error: Your submitted value for 'Tablet Bid Modifier' must be between 0 and 3, corresponding to the -100% to 300% range.");
    }
  }
};


/*
* @return void
* @throws {error} UrlType_ValueError
*/
ConfigValidator.prototype.checkUrlTypeValues = function() {
  if(URL_SCHEMA.urlType !==  "Default_Search" &&  URL_SCHEMA.urlType !== "Custom_ByFeedString" && URL_SCHEMA.urlType !== "Custom_ByObject") {
    throw new Error("UrlType_ValueError: Your current value '" + URL_SCHEMA.urlType +
    "' must match one of the following (case-sensitive) values: 'Default_Search' (urlPrefix + keyword) or Custom_ByFeedString' (via feed column) or 'Custom_ByObject' (implementation needed)");
  }
};

/*
* @return void
* @throws {error} UrlAddParam_ValueError
*/
ConfigValidator.prototype.checkUrladdParamValue = function(){
  if(URL_SCHEMA.addParameters !==  "YES" && URL_SCHEMA.addParameters !== "NO") {
    throw new Error("UrlAddParam_ValueError: Your current value '" + URL_SCHEMA.addParameters +
    " must match one of the following (case-sensitive) values: 'YES', 'NO'. ");
  }
};


/*
* @return void
* @throws {error} UrlName_And_ExtraColumnMismatchError
*/
ConfigValidator.prototype.checkUrlNameInAdGroupObject = function() {
  if(URL_SCHEMA.urlType === "Custom_ByFeedString" && EXTRA_COLUMN_OBJECTVALUES.indexOf(URL_SCHEMA.urlNameInAdGroupObject) == -1) {
    throw new Error("UrlName_And_ExtraColumnMismatchError: Your current value in urlNameInAdGroupObject '" + URL_SCHEMA.urlNameInAdGroupObject + "' must match" +
      " one of your (case-sensitive) values in your EXTRA_COLUMN_OBJECTVALUES: " + EXTRA_COLUMN_OBJECTVALUES);
  }
};

/*
* @return void
* @throws {exception} MissingAdGroupStatusLabelException
*/
ConfigValidator.prototype.checkAdGroupStatusLabelConfig = function() {
  if(typeof(ADGROUP_STATUS_LABELS) === "undefined") {
    Logger.log("Missing AdGroupStatusLabel Variable (optional): If you wish to initially (ONLY initially!) change your adgroup status labels, please update your config and add the variable 'ADGROUP_STATUS_LABELS' to your hidden config as follows");
    Logger.log('var ADGROUP_STATUS_LABELS = {"ENABLED" : "Activated_by_nrFeedCamps", "PAUSED" : "Paused_by_nrFeedCamps"};  // Change the values after the : as needed ');
    Logger.log("The values after 'ENABLED' and 'PAUSED' can be changed if necessary, e.g. if two scripts write into one campaign."); Logger.log(" ");
  }
};

/*
* @return void
* @throws {error} NewKeywordConfig_ValueError
*/
ConfigValidator.prototype.checkNewKeywordConfig_Matchtypes = function(){
  var nonExactMatchtype = NEW_KEYWORD_CONFIG.NonExact_Phrase_or_MobBroad;
  if(nonExactMatchtype !==  "P" && nonExactMatchtype !== "MB" && nonExactMatchtype !== "-") {
    throw new Error("NewKeywordConfig_ValueError: Your current value '" + nonExactMatchtype +
    " must match one of the following (case-sensitive) values: 'P', 'MB', '-' ('-' means exact only). Define how the matchtype will be added. ");
  }
};

/*
* @return void
* @throws {error} NewKeywordConfig_UrlSetError
*/
ConfigValidator.prototype.checkNewKeywordConfig_SetUrls = function(){
  if(NEW_KEYWORD_CONFIG.SET_KEYWORD_URLS !==  "YES" && NEW_KEYWORD_CONFIG.SET_KEYWORD_URLS !== "NO") {
    throw new Error("NewKeywordConfig_UrlSetError: Your current value '" + NEW_KEYWORD_CONFIG.SET_KEYWORD_URLS +
    " must match one of the following (case-sensitive) values: 'YES', 'NO'. ");
  }
};


/*
* @return void
* @throws {exception} NewKeywordConfig_MissingMaxCost_Exception
*/
ConfigValidator.prototype.checkNewKeywordConfig_MaxCost = function(){
  if(typeof NEW_KEYWORD_CONFIG.AutoPause_MaxCost === "undefined") {
    Logger.log("NewKeywordConfig_MissingMaxCost_Exception: You haven't set a cost limit to auto-pause poor performing keywords. If not set, the default 100 Euros (or account currency) will apply.");
    Logger.log("If you wish to set a different value, please add these lines to your configuration:");
    Logger.log("NEW_KEYWORD_CONFIG.AutoPause_MaxCost = 80; // Example value 80");
    Logger.log("NEW_KEYWORD_CONFIG.AutoPause_LookBack_DateRange = 'LAST_30_DAYS'; // Or other valid AWQL DateRangeLiteral values"); Logger.log(" ");
  }
};

/*
* @return void
* @throws {exception} NewKeywordConfig_MissingCloseVariants_Exception
*/
ConfigValidator.prototype.checkNewKeywordConfig_addCloseVariants = function(){
  if(typeof NEW_KEYWORD_CONFIG.addCloseVariants === "undefined") {
    Logger.log("NewKeywordConfig_MissingCloseVariants_Exception: You haven't added the following config variable to allow for new close keyword variants via Google Suggest.");
    Logger.log("If you wish to add close exact variants to existing ad groups, please add this line to your configuration:");
    Logger.log("NEW_KEYWORD_CONFIG.addCloseVariants = 1; //  1 means new close keyword variants via Google Suggest"); Logger.log(" ");
  }
};


/*
* @return void
* @throws {error} SitelinkFallback_TextLength_Error
*/
ConfigValidator.prototype.checkSitelinkFallback_TextLength = function(){
  var sitelinkFallbackArray = SITELINK_BUILDER_CONFIG.sitelinkFallbacks;
  for(var i=0; i<sitelinkFallbackArray.length;i++){
    if(sitelinkFallbackArray[i].text.length > 25) throw new Error("SitelinkFallback_TextLength_Error: The value '" + sitelinkFallbackArray[i].text + "' is longer than 25 chars. Please shorten!");
  }
};

/*
* @return void
* @throws {error} SitelinkUrl_ResponseError
* @throws {error} SitelinkUrl_MalformedUrlError
*/
ConfigValidator.prototype.checkSitelinkUrls = function(){
  var sitelinkFallbackArray = SITELINK_BUILDER_CONFIG.sitelinkFallbacks;
  for(var i=0; i<sitelinkFallbackArray.length;i++){
    try{
      var response = UrlFetchApp.fetch(sitelinkFallbackArray[i].url);
      var code = response.getResponseCode();
      var expectedCodes = [200,301,302,307];
      if(expectedCodes.indexOf(code) === -1) {
        throw new Error("SitelinkUrl_ResponseError: The sitelink url " + sitelinkFallbackArray[i].url + " returned HTTP status code " + response.getResponseCode() + ". Expected codes : " + expectedCodes);
      }
    }catch(e){
      throw new Error("SitelinkUrl_MalformedUrlError: The value '" + sitelinkFallbackArray[i].url + "' is not a correct URL. Please check the value!" + e + ". stack: " + e.stack);
    }
  }
};

/*
* @return void
* @throws {error} UrlPrefixError
*/
ConfigValidator.prototype.checkUrlPrefixes = function(){

  var dummyAdUrl = URL_SCHEMA.urlPrefix + "a";
  var dummySiteLinkUrl = URL_SCHEMA.sitelinkSearchUrlPrefix + "a";
  var dummyUrls = [dummyAdUrl];

  if(SET_SITELINKS) dummyUrls.push(dummySiteLinkUrl);

  for(var i=0; i<dummyUrls.length;i++){

    // Only checking adurls for type "Default_Search"
    if(URL_SCHEMA.urlType !== "Default_Search") continue;
    try{
      var response = UrlFetchApp.fetch(dummyUrls[i]);
      var code = response.getResponseCode();
      var expectedCodes = [200,301,302,307];
      if(expectedCodes.indexOf(code) == -1) {
        throw new Error("UrlPrefix_ResponseError (urlPrefix or sitelink): The test url " + dummyUrls[i] + " returned HTTP status " + response.getResponseCode() + ". Expected codes : " + expectedCodes);
      }
    } catch(e){
        try{
          Utilities.sleep(20000);
          var response = UrlFetchApp.fetch(dummyUrls[i]);
          var code = response.getResponseCode();
          var expectedCodes = [200,301,302,307];
        } catch(e2){
          if(e2.toLowerCase().indexOf("Timeout") != -1) {
            Logger.log("The test URL " + dummyUrls[i] + " ran into a timeout. Please check your site speed. Error : " + e2 );
          } else throw new Error("UrlPrefix_MalformedUrlError (urlPrefix or sitelink): The value '" + dummyUrls[i] + "' is not a valid URL or ran into a timeout. Please check for spaces and special characters.");
        }

    }
  } // END FOR Loop
};

/*
* @return void
* @throws {error} NewKeywordConfig_ValueError
*/
ConfigValidator.prototype.checkChangedOrNewConfigValues = function() {};

/*
* @return void
* @throws {error} NewKeywordConfig_ValueError
*/
ConfigValidator.prototype.checkMissingConfigValues = function(){};

/*
* @return void
* @throws {error} NewKeywordConfig_ValueError
*/
ConfigValidator.prototype.checkAdTemplate_Params = function(){};


/*
* @return void
* @throws {error} AdTemplateHeader_ValueError
*/
ConfigValidator.prototype.checkAdTemplate_HeaderValues = function(){

  var allSheets = SpreadsheetApp.openById(this.sheetId).getSheets();

  for(var i=0;i<allSheets.length;i++){
    if(allSheets[i].getName() === "(errors)" || allSheets[i].getName() === "(urls)") continue;
    var headerRow = allSheets[i].getRange(1,1,1,10).getValues();

    for(var j=1;j<headerRow.length;j++){
      if(headerRow[j].length !== 0 && AD_TEMPLATE_HEADER_VALUES.indexOf(headerRow[j]) == -1) {
        throw new Error("AdTemplateHeader_ValueError: Your column header value '" + headerRow[j] + "' in tab '" + allSheets[i].getName() + "' does not match the eligible values: " + AD_TEMPLATE_HEADER_VALUES);
      }
    }
  }
};

/*
* @return void
* @throws {error} AdConfigMisMatchError
*/
ConfigValidator.prototype.checkAdTemplatesByConfig = function(){

  if(SET_ADS_CONFIG.standard && SET_ADS_CONFIG.sale) throw new Error("AdConfigMisMatchError: the selected set ads configuration does not match. Either set standard OR sale to 1.");
};

/*
* @return void
* @throws {error} AdTemplate_HeadlineAndDescription_LengthError
*/
ConfigValidator.prototype.checkAdTemplate_HeadlineAndDescriptionLength = function(){

  // UNFINISHED !!
    var allSheets = SpreadsheetApp.openById(this.sheetId).getSheets();
};


/*
* @return void
* @throws {exception} MissingAdHeadline_CutOffConfig
*/
ConfigValidator.prototype.checkAdHeadline_CutOffConfig = function(){
  if(typeof AD_HEADLINE_TOO_LONG_CUTOFFBY === "undefined") {
    Logger.log("MissingAdHeadline_CutOffConfig : To cut off your ad headlines by word, please add the config variable 'AD_HEADLINE_TOO_LONG_CUTOFFBY'. It should look like this: ");
    Logger.log('var AD_HEADLINE_TOO_LONG_CUTOFFBY = "word"; // Eligile values: "word" , "char"'); Logger.log(" ");
  }
};



/*
* @return void
* @throws {error} AdTemplate_Headline2Length_Error
* @throws {error} AdTemplate_DescriptionLength_Error
*/
ConfigValidator.prototype.checkAdTemplateTextLength = function(){
  var allSheets = SpreadsheetApp.openById(this.sheetId).getSheets();

  for(var i=0; i<allSheets.length; i++) {

    var headlineTwoData = allSheets[i].getRange(3,1,1,10).getValues();
    for(var j=0; j<headlineTwoData.length; j++){
      if(headlineTwoData[j].length > 30 && headlineTwoData[j].indexOf("{") == -1) throw new Error("AdTemplate_Headline2Length_Error: One headline2 in sheet " + allSheets[i].getName() + " exceeds the 30char length limit: " + headlineTwoData[i]);
    }

    var descData = allSheets[i].getRange(4,1,1,10).getValues();
    for(var j=0; j<descData.length; j++){
      if(descData[j].length > 80 && descData[j].indexOf("{") == -1) throw new Error("AdTemplate_DescriptionLength_Error: One description in sheet " + allSheets[i].getName() + " exceeds the 80char length limit: " + descData[i]);
    }
  } // END FOR Sheets loop
};


/*
* @return void
* @throws {exception}
*/
ConfigValidator.prototype.checkNonServingElements = function(){
  if(typeof PAUSE_NONSERVING_ELEMENTS === "undefined") {
    Logger.log("NonServingElementsConfig_Exception: You haven't added the following config variable to allowing of non-serving keywords and ad groups due to low search volume.");
    Logger.log("If you wish to pause non-serving elements, please add this line to your configuration:");
    Logger.log("var PAUSE_NONSERVING_ELEMENTS = 1; // 1 means true, thus non-serving keywords and ad groups will be paused and labeled;"); Logger.log(" ");
  }
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 0. CAMPAIGNHANDLER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function CampaignHandler(columnMapper, feedContent) {
  this.feedContent = feedContent;
  this.campaignInfoConfig = CAMPAIGN_INFO_CONFIG;
  this.columnMapper = columnMapper;
  this.missingCampaigns = [];
}

/**
* @return bool true
* throw error MissingCampaignConfigError
*/
CampaignHandler.prototype.campaignInfoConfigValidator = function() {
  // not implemented yet, not necessary yet
  if(!this.campaignInfoConfigValidator()) throw new Error("MissingCampaignConfigError: Please check your 'CAMPAIGN_INFO_CONFIG' configuration object");

  return true;
};

/**
* @return array validatedCampaignList
* @throws error MissingCampaignError
* @throws exception UnknownCampaignType
*/
CampaignHandler.prototype.getCampaignNames = function() {

  var campaignType = this.campaignInfoConfig["campaign type"];
  var inputCampaignList = [];

  inputCampaignList = this.getCampaignList();
  var validatedCampaignList = this.removeMissingCampaigns(inputCampaignList);

  if(DEBUG_MODE === 1) Logger.log("validatedCampaignList:" + validatedCampaignList);
  if(validatedCampaignList.length === 0) throw new Error("MissingCampaignError: No validated campaigns found. Please check your campaign prefix or rerun the script if autoCampaignCreation is enabled.");

  validatedCampaignList = shuffleArray(validatedCampaignList);

  return validatedCampaignList;
};


/**
* @param array
* @return array
*/

CampaignHandler.prototype.shuffleArray = function(array) {
  for (i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
  return array;
}

/**
* @return array campaignsNotInFeed
* @throws error MissingCampaignError
* @throws exception UnknownCampaignType
*/
CampaignHandler.prototype.getCampaignsNotInFeed = function() {

  var campaignList = this.getCampaignList();
  var campaignsNotInFeed = [], activeCampaigns = [];

  if(this.campaignInfoConfig["campaign identifier"].length === 0) return campaignsNotInFeed;

  try{

	var campaignIterator = AdsApp.campaigns().withCondition("Status = ENABLED")
		.withCondition('LabelNames CONTAINS_ANY ["EntityCheck_TBD", "EntityCheck_Complete"]')
		.withCondition('Name CONTAINS_IGNORE_CASE \"' + this.campaignInfoConfig["campaign identifier"] + '\"')
		.get();

	while(campaignIterator.hasNext()) {
		activeCampaigns.push(campaignIterator.next().getName());
	}

	for(var i=0; i<activeCampaigns.length; i++){
		if(campaignList.indexOf(activeCampaigns[i]) == -1) campaignsNotInFeed.push(activeCampaigns[i]);
	}
  } catch (e) { Logger.log("GetCampaignsNotInFeed_Exception: " + e + ". stack: " + e.stack); }

  if(campaignsNotInFeed.length > 0) Logger.log(campaignsNotInFeed.length + " CampaignsNotInFeed, pausing all adgroups : " + campaignsNotInFeed.sort());
  return campaignsNotInFeed;
};


/*
* @return {array} campaignList
* @throws {exception} EmptyCampaignListException
*/
CampaignHandler.prototype.getCampaignList = function() {
  var campaignList = [];

  for(var i=1;i<this.feedContent.length;i++){
    var listItem = this.feedContent[i];

    var campIdentifier = this.campaignInfoConfig["campaign identifier"];
    var campaignName = listItem[this.columnMapper["target campaign"]];

    // Check if campaign 1. contains brand prefix and 2. if not already in brandlist
    if(campIdentifier.length > 0 && campaignName.indexOf(campIdentifier) != -1 && campaignList.indexOf(campaignName) == -1) campaignList.push(campaignName);
    if(campIdentifier.length === 0 && campaignList.indexOf(campaignName) == -1) campaignList.push(campaignName);
  }

  if(DEBUG_MODE === 1) Logger.log("Campaign list found in feed : " + campaignList);
  if(campaignList.length === 0) Logger.log("EmptyCampaignListException: Are you sure your 'campaign prefix' filter matches any current campaigns?");

  return campaignList;
};


/*
* @param array inputCampaignList
* @return array validatedCampaignNames
* @throws exception ParsingErrorInSelectorExpection
*/
CampaignHandler.prototype.removeMissingCampaigns = function(inputCampaignList) {

  var campaignNames = inputCampaignList;
  var missingCampaigns = [];
  var indicesOfItemsToBeRemoved = [];

  for(var i=0; i<campaignNames.length; i++){
    try{
      var campaignSelector = AdsApp.campaigns().withCondition('Name = "' + campaignNames[i] + '"');
      if(DEBUG_MODE === 1) Logger.log("Campaign found for " + campaignNames[i] + " : " + campaignSelector.get().totalNumEntities());

      if(campaignSelector.get().totalNumEntities() === 0) {

        missingCampaigns.push(campaignNames[i]);
        indicesOfItemsToBeRemoved.push(i);
      }
    } catch(e) {Logger.log("ParsingErrorInSelectorExpection: Please change the name of : " + campaignNames[i] + ". Specific error : " + e);}
  }

  this.missingCampaigns = missingCampaigns;

  if(missingCampaigns.length > 0) {
    this.createCampaigns(missingCampaigns);
    this.writeMissingCampaignsToErrorLog(missingCampaigns);
  }

  var validatedCampaignNames = this.removeArrayByIndices(campaignNames, indicesOfItemsToBeRemoved);

  return validatedCampaignNames;
};


/*
* @param array fullList
* @param array arrayOfIndices
* @return array reducedList
*/
CampaignHandler.prototype.removeArrayByIndices = function(fullList, arrayOfIndices) {
  var reducedList = fullList;

  if(DEBUG_MODE === 1) {Logger.log("IndicesArray of missing campaigns:" + arrayOfIndices.length);}

  for(var i=0; i<arrayOfIndices.length; i++) {
    reducedList.splice(arrayOfIndices[i],1);
  }
  if(DEBUG_MODE === 1) {Logger.log("reducedList : " + reducedList);}
  return reducedList;
};


/*
* @param array missingCampaigns
* @return void
*/
CampaignHandler.prototype.writeMissingCampaignsToErrorLog = function(missingCampaigns) {
  if (NEW_CAMPAIGN_CONFIG["autoCreateCampaignsByUpload"] === 0){

    ERROR_SUMMARY_OBJECT.missingCampaigns = this.missingCampaigns;

    for(var i=0; i < missingCampaigns.length; i++) {
      var errorRow = [TIME_STAMP, "Camp", "NotFound", "Feed campaign name not found in Google Ads",missingCampaigns[i] ,"","","","","","","","","","","","","","","","","",""];
      ERROR_LOG.push(errorRow);
    }
  Logger.log("The following campaigns need to be created, or names to be adjusted: " + missingCampaigns + ". An error summary email will be triggered at the end.");
  }
};

/**
* @param  {array} campaignsToCreate contains the names of all campaigns to create.
* @return {void}
* @throws {error} MissingNewCampaignConfigError
*/
CampaignHandler.prototype.createCampaigns = function(campaignsToCreate) {

  if (NEW_CAMPAIGN_CONFIG["autoCreateCampaignsByUpload"] == 1) {

    Logger.log("Creating the following campaigns: " + campaignsToCreate);
    if(!NEW_CAMPAIGN_CONFIG) {throw new Error("MissingNewCampaignConfigError: NEW_CAMPAIGN_CONFIG is undefined");}

    var columns = ["Campaign", "Budget", "Campaign state", "Campaign type", "Campaign subtype", "Start Date", "End Date", "Bid Strategy Type",
      "Networks", "Enhanced CPC", "Delivery method"];

    var upload = AdsApp.bulkUploads().newCsvUpload(columns);

    for (var i = 0; i < campaignsToCreate.length; i++) {
      var row = NEW_CAMPAIGN_CONFIG.newcampSettings;
      row["Campaign"] = campaignsToCreate[i];
      upload.append(row);
    }

    if (NEW_CAMPAIGN_CONFIG.uploadWithoutPreview) {
      upload.apply();
      Logger.log("Applying upload done. Waiting for upload to complete.");
    } else {
      Logger.log("Previewing upload.");
      upload.preview();
      Logger.log("Done. Go to the bulk upload section of your Ads account to preview the changes. ");
    }
  } else { Logger.log("No campaigns will be created due to autoCreateCampaignsByUpload configuration.");}

  Utilities.sleep(20000);
  this.applyLabels(campaignsToCreate);
};




/**
* Applies given lables to newly created campaigns.
* @param  {array} campaignsToCreate contains the names of all campaigns to create.
* @return {void}
*/
CampaignHandler.prototype.applyLabels = function(campaignsToCreate) {
  var labels;

  if (typeof NEW_CAMPAIGN_CONFIG.newcampSettings.labels !== "undefined") {
    labels = NEW_CAMPAIGN_CONFIG.newcampSettings.labels;
  } else return;

  if(labels.indexOf("newFeedCampaigns_add_Lang+Loc_Settings") == -1) labels.push("newFeedCampaigns_add_Lang+Loc_Settings");
  if(campaignsToCreate.length === 0 ) return;

  Logger.log(" "); Logger.log("Applying labels to newly created campaigns.");
  for (var i = 0; i < campaignsToCreate.length; i++) {
    var campaign;

    try {
      campaign = AdsApp.campaigns().withCondition('Name = "' + campaignsToCreate[i] + '"').get().next();
      for (var j = 0; j < labels.length; j++) {
        var labelSelector = AdsApp.labels().withCondition("Name = '" + labels[j] + "'").get();
        if (labelSelector.totalNumEntities() > 0) {
          campaign.applyLabel(labels[j]);
        } else {
          AdsApp.createLabel(labels[j]);
          campaign.applyLabel(labels[j]);
        }
      }
    } catch (e) {Logger.log("CampaignLabelOperationException: " + e+". Stack: "+e.stack);}
  } // END FOR loop campaigns
};

/*
* @param {string} newLabelName
* @param {string} campaignName
* @param {string} oldLabelName
* @return {void}
*/
CampaignHandler.prototype.setNewAndRemoveOldCheckLabels = function (newLabelName,campaignName, oldLabelName){

  this.provideLabel(newLabelName);
  this.provideLabel(oldLabelName);

  try{
    var labelIterator = AdsApp.labels().withCondition('Name CONTAINS_IGNORE_CASE "' + newLabelName + '"').get();
    var campaign;

    if (labelIterator.totalNumEntities() > 0) {
      var campaignIterator = AdsApp.campaigns().withCondition('Name = "' + campaignName + '"').withCondition('LabelNames CONTAINS_ANY ["' + newLabelName + '"]').get();

      if(campaignIterator.totalNumEntities() === 0) {
        campaign = AdsApp.campaigns().withCondition('Name = "' + campaignName + '"').get().next();
        campaign.applyLabel(newLabelName);
        campaign.removeLabel(oldLabelName);
      }
    } else campaign.applyLabel(newLabelName);
  } catch (e) { Logger.log("CampaignLabelOperationException: " + e + ". stack : " + e.stack); Logger.log(" ");}
};

/*
* @param {string} labelName
* @param {string} campaignName
* @return {bool} hasLabel
*/
CampaignHandler.prototype.getLabel = function (labelName,campaignName){

  var hasLabel;
  try {
    campaign = AdsApp.campaigns().withCondition('Name = "' + campaignName + '"').get().next();
    var labelSelector = campaign.labels().withCondition("Name = '" + labelName + "'").get();

    if (labelSelector.totalNumEntities() > 0) {
      hasLabel = true;
    } else hasLabel = false;
  } catch (e) { Logger.log("CampaignLabelOperationException: " + e + ". stack : " + e.stack); Logger.log(" ");}
  return hasLabel;
};


/*
* @param {string} labelName
* @return {void}
*/
CampaignHandler.prototype.provideLabel = function (labelName){

  try {
    var labelSelector = AdsApp.labels().withCondition("Name = '" + labelName + "'").get();
    if (labelSelector.totalNumEntities() === 0) AdsApp.createLabel(labelName);
  } catch (e) { Logger.log("LabelOperationException: " + e); Logger.log(" ");}
};


/*
* @param {array} campaignNameArray
* @return {void}
* @throws {error} ScopeLabel_MisMatch_Error
*/
CampaignHandler.prototype.pauseAdGroupsOfCampaignsByName = function(campaignNameArray){
	var pausedLabel_adgroup = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["PAUSED"] : "Paused_by_nrFeedCamps";
	var activeLabel_adgroup = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "Activated_by_nrFeedCamps";
	var scopeLabel_campaign = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "";

	if(scopeLabel_campaign.indexOf("Activated_by") > -1){
		scopeLabel_campaign = scopeLabel_campaign.replace("Activated_by","");

	} else {
		throw new Error("ScopeLabel_MisMatch_Error: Your AdGroup ENABLED values must start with 'Activated_by_nrFeedCamps'. Please check your DGROUP_STATUS_LABELS config variable.");
	}

	this.provideLabel(pausedLabel_adgroup);
	this.provideLabel(activeLabel_adgroup);

	try{

		for(var i = 0; i < campaignNameArray.length; i++){
			var campaignName = campaignNameArray[i];
			var campaignSelector = AdsApp.campaigns().withCondition('Name = \"'+campaignName+'\"').withCondition("LabelNames CONTAINS_ANY ['"+scopeLabel_campaign+"']").get();
			var campaign;
			if(campaignSelector.hasNext()){
				campaign = campaignSelector.next();

				// Pause all active adgroups with label scope
				var adgroups = campaign.adGroups().withCondition("Status = ENABLED").withCondition("LabelNames CONTAINS_ANY ['"+ activeLabel_adgroup +"']").get();
				while(adgroups.hasNext()){
					var adgroup = adgroups.next();
					adgroup.pause();
					adgroup.applyLabel(pausedLabel_adgroup);
					adgroup.removeLabel(activeLabel_adgroup);
				}
				if(DEBUG_MODE === 1){Logger.log("All adgroups for campaign "+campaign.getName()+" paused.");}
			}
		} // END For Campaigns

	} catch(e){ Logger.log("AdgroupPausingException: "+ e + ".stack: " + e.stack); }
};


/*
* @return {array} shouldBeActiveCampaigns
* @throws {exception} GetShouldBeActiveCampaignsException
*/
CampaignHandler.prototype.getShouldBeActiveCampaigns = function(){
	var campaignList = this.getCampaignList();
	var shouldBeActiveCampaigns = [], inactiveCampaigns = [];

	try{
		var campaignIterator = AdsApp.campaigns().withCondition("Status = PAUSED")
			.withCondition('LabelNames CONTAINS_ANY ["EntityCheck_TBD", "EntityCheck_Complete"]')
			.get();

		while(campaignIterator.hasNext()) {
			inactiveCampaigns.push(campaignIterator.next().getName());
		}

		for(var i=0; i<inactiveCampaigns.length; i++){
			if(campaignList.indexOf(inactiveCampaigns[i]) > -1) shouldBeActiveCampaigns.push(inactiveCampaigns[i]);
		}
	} catch (e) { Logger.log("GetShouldBeActiveCampaignsException: " + e + ". stack: " + e.stack); }

	if(shouldBeActiveCampaigns.length > 0) Logger.log(shouldBeActiveCampaigns.length + " inactive campaigns should be active, activating : " + shouldBeActiveCampaigns.sort());

	return shouldBeActiveCampaigns;
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 0. CAMPAIGNSETTINGUPDATESERVICE @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function CampaignSettingUpdateService() {
  if (typeof NEW_CAMPAIGN_CONFIG != "undefined") {

    this.targetedLocations = typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Targeted Locations ID"] != "undefined" ? NEW_CAMPAIGN_CONFIG.newcampSettings["Targeted Locations ID"] : "NONE";
    this.excludedLocations = typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Excluded Locations ID"] != "undefined" ? NEW_CAMPAIGN_CONFIG.newcampSettings["Excluded Locations ID"] : "NONE";

		this.negativeLists = typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Negative Lists"] != "undefined" ? NEW_CAMPAIGN_CONFIG.newcampSettings["Negative Lists"] : "NONE";

    this.mobilebidModifier = typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"] != "undefined" ? NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"] : "NONE";
    this.tabletbidModifier = typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"] != "undefined" ? NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"] : "NONE";

    this.biddingStrategy = typeof NEW_CAMPAIGN_CONFIG.newcampSettings["Bidding Strategy"] != "undefined" ? NEW_CAMPAIGN_CONFIG.newcampSettings["Bidding Strategy"] : "NONE";
  }
}

/*
* [updateCampaigns description]
* @return {[type]} [description]
* @throws {exception} CampaignUpdateException
*/
CampaignSettingUpdateService.prototype.updateCampaigns = function() {

  this.getLabel("feedCamps_Lang+Loc_Settings_checked");
  this.getLabel("newFeedCampaigns_add_Lang+Loc_Settings");

  try{
    var label = AdsApp.labels().withCondition('Name = "newFeedCampaigns_add_Lang+Loc_Settings"').get().next();
    var campaignIterator = label.campaigns().withCondition('Name CONTAINS_IGNORE_CASE "' + CAMPAIGN_INFO_CONFIG["campaign identifier"] + '"').get();

    while (campaignIterator.hasNext()) {
      var campaign = campaignIterator.next();
      this.updateCampaignSettings(campaign);
      campaign.removeLabel("newFeedCampaigns_add_Lang+Loc_Settings");
      campaign.applyLabel("feedCamps_Lang+Loc_Settings_checked");
    }
    Logger.log("Updated the location settings for all new campaigns with label 'feedCamps_Lang+Loc_Settings_checked'."); Logger.log(" ");
  } catch(e) {Logger.log("CampaignUpdateException: " + e + ". stack : " + e.stack);}

  this.findCampaignsNotInScope();

};


/*
* @param  {object} campaign
* @return {void}
* @throws {exception} MissingBiddingStrategy_Exception
*/
CampaignSettingUpdateService.prototype.updateCampaignSettings = function(campaign) {

  this.addLocations_(campaign);
  this.excludeLocations_(campaign);
  this.addNegativeLists_(campaign);
  this.addMobileBidModifier_(campaign);
  this.addTabletBidModifier_(campaign);
  this.addBiddingStrategy_(campaign);
  this.setScopeLabel_(campaign);
};

CampaignSettingUpdateService.prototype.findCampaignsNotInScope = function(){
	if(DEBUG_MODE == 1){Logger.log("Finding campaigns without scope label.");}
	var label_enabled = typeof ADGROUP_STATUS_LABELS !== "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "";
	if(!this.scope_string){
		this.scope_string = typeof ADGROUP_STATUS_LABELS !== "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "";
		if(this.scope_string.indexOf("Activated_by") > -1) {
			this.scope_string = this.scope_string.replace("Activated_by","");
		} else {
			throw new Error("Your AdGroup ENABLED values must start with 'Activated_by_nrFeedCamps'");
		}
	}

	this.getLabel(this.scope_string);

	if(label_enabled == "") {
		Logger.log("No specific AdGroup Status label given. Campaigns which previously have been deleted from feed, won't receive a scope label.");
		return;
	}

	var campaignSelector;
	try{
		campaignSelector = AdsApp.campaigns()
			.withCondition("LabelNames CONTAINS_ANY ['EntityCheck_Complete','EntityCheck_TBD']")
			.withCondition("CampaignName CONTAINS_IGNORE_CASE '"+CAMPAIGN_INFO_CONFIG["campaign identifier"]+"'")
			.withCondition("LabelNames CONTAINS_NONE ['"+this.scope_string+"']").get();
	} catch(e){
		Logger.log("An error occured while selecting campaigns for scope check. Error: "+e+". Stack: "+e.stack);
		return;
	}

	if(DEBUG_MODE == 1){Logger.log("Number of campaigns to be checked for scope: "+campaignSelector.totalNumEntities());}


	while(campaignSelector.hasNext()){
		var campaign = campaignSelector.next();
		try{
			var adgroups = campaign.adGroups().withCondition("Status != REMOVED").withCondition("LabelNames CONTAINS_ANY ['"+label_enabled+"']").get();
		} catch(e){
			Logger.log("An error occured while selecting adgroups for scope check. Error: "+e+". Stack: "+e.stack);
			return;
		}

		if(adgroups.totalNumEntities() > 0){
			campaign.applyLabel(this.scope_string);
			if(DEBUG_MODE == 1){Logger.log("Added campaign "+campaign.getName()+" to scope "+this.scope_string);}
		}
	}
};

CampaignSettingUpdateService.prototype.setScopeLabel_ = function(campaign) {
	if(DEBUG_MODE == 1){Logger.log("Setting scope label now.");}
  	if(!this.scope_string){
  		this.scope_string = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "";
  		if(this.scope_string.indexOf("Activated_by") > -1){
  			this.scope_string = this.scope_string.replace("Activated_by","");
  		} else {
  			throw new Error("Your AdGroup ENABLED values must start with 'Activated_by_nrFeedCamps'");
  		}
  	}
  this.getLabel(this.scope_string);
  if(DEBUG_MODE == 1){Logger.log("Setting scope label "+this.scope_string+" to campaign "+campaign.getName());}
  campaign.applyLabel(this.scope_string);
};

/**
 * [addLocations_ description]
 * @param {[type]} campaign [description]
 */
CampaignSettingUpdateService.prototype.addLocations_ = function(campaign) {
  if (this.targetedLocations == "NONE") return;
  for (var i = 0; i < this.targetedLocations.length; i++) campaign.addLocation(this.targetedLocations[i]);
};


/*
* @param  {object} campaign
 * @return {void}
 */
CampaignSettingUpdateService.prototype.excludeLocations_ = function(campaign) {
  if (this.excludedLocations == "NONE") return;
  for (var i = 0; i < this.excludedLocations.length; i++) campaign.excludeLocation(this.excludedLocations[i]);
};


/*
* @param  {object} campaign
 * @return {void}
 */
CampaignSettingUpdateService.prototype.addNegativeLists_ = function(campaign) {
  if (this.addNegativeLists == "NONE") return;
  try{
		for (var i = 0; i < this.addNegativeLists.length; i++) {
			var negativeKeywordListIterator = AdsApp.negativeKeywordLists().withCondition('Name = "' + addNegativeLists + '"').get();

			if (negativeKeywordListIterator.totalNumEntities() == 1) {
				var negativeKeywordList = negativeKeywordListIterator.next();
				campaign.addNegativeKeywordList(negativeKeywordList);
			}
		}
  } catch (e) {Logger.log("CampaignSettingUpdateService_AddNegativeList_Exception : " + e + ". stack : " + e.stack);}
};



/**
 * [addMobileBidModifier_ description]
 * @param {[type]} campaign [description]
 */
CampaignSettingUpdateService.prototype.addMobileBidModifier_ = function(campaign) {
  if (this.mobilebidModifier == "NONE") return;
  campaign.targeting().platforms().mobile().get().next().setBidModifier(NEW_CAMPAIGN_CONFIG.newcampSettings["Mobile Bid Modifier"]);
};


/**
 * [addTabletBidModifier_ description]
 * @param {[type]} campaign [description]
 */
CampaignSettingUpdateService.prototype.addTabletBidModifier_ = function(campaign) {
  if (this.tabletbidModifier == "NONE") return;
  campaign.targeting().platforms().tablet().get().next().setBidModifier(NEW_CAMPAIGN_CONFIG.newcampSettings["Tablet Bid Modifier"]);
};


/**
 * [addBiddingStrategy_ description]
 * @param {[type]} campaign [description]
 */
CampaignSettingUpdateService.prototype.addBiddingStrategy_ = function(campaign) {
  if (this.biddingStrategy == "NONE" || this.biddingStrategy !== "") return;

  try {
    var biddingStrategy = AdsApp.biddingStrategies().withCondition("Name = '" + this.biddingStrategy + "'").get().next();
    campaign.bidding().setStrategy(biddingStrategy);
  } catch (e) { Logger.log("MissingBiddingStrategy_Exception : The (to be applied) bidding strategy '" + this.biddingStrategy + "' does not exist yet. Please add manually."); }
};


/*
* @param {string} labelName
* @return {bool} hasLabel
*/
CampaignSettingUpdateService.prototype.getLabel = function (labelName){

  try {
    var labelSelector = AdsApp.labels().withCondition("Name = '" + labelName + "'").get();
    if (labelSelector.totalNumEntities() === 0) AdsApp.createLabel(labelName);
  } catch (e) { Logger.log("LabelOperationException: " + e); Logger.log(" ");}
};




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 0. FEEDCOLUMNVALIDATOR @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function FeedColumnValidator(feedContent,requiredColums,extraColumns){
  this.requiredKeyArray = requiredColums;
  this.feedContent = feedContent;
  this.columnSeparator = COLUMN_SEPARATOR;
  this.extraKeyArray = extraColumns;
}


/*
* @return object columnMapper
* @throws exception NoExtraColumnInfo
* @throws error ColumnSeparatorError
* @throws error MissingRequiredColumnError
*/
FeedColumnValidator.prototype.getColumnMapper = function() {
  var headerColumn = this.feedContent[0];
  var columnMapper = {};

  // add extra key to required array
  try{
    if(this.extraKeyArray) {
      var extraKeyArray = this.extraKeyArray;
      for(var i=0; i<extraKeyArray.length; i++){
        this.requiredKeyArray.push(extraKeyArray[i].toLowerCase());
      }
    }
  } catch(e){Logger.log("NoExtraColumnInfo: No additional, account-specfic columns were added to feed.");}

  for(var k=0; k<headerColumn.length; k++){
    columnMapper[headerColumn[k].toLowerCase()] = k;
  }
  for(var j=0; j<this.requiredKeyArray.length; j++) {
    if(!columnMapper.hasOwnProperty(this.requiredKeyArray[j].toLowerCase())){
      Logger.log(this.requiredKeyArray);
      throw new Error("MissingRequiredColumnError : " + this.requiredKeyArray[j] + " does not exist in feed. Please make sure all these columns exist");
    }
  }
  Logger.log("Validated columnMapper : " + JSON.stringify(columnMapper));

  return columnMapper;
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 1. FEEDHANDLER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function FeedHandler(feedurl, columnSeparator, columnMapper, campaignName, feedContent) {
  this.feedColSeparator = columnSeparator;
  this.feedContent = feedContent;
  this.columnMapper = columnMapper;
  this.campaignName = campaignName;
}


/**
* @return array adGroups, onedim array of objects
* @throws error ExtraSpaceInAdGroup_Error
*/
FeedHandler.prototype.getAdGroupObjects = function() {
  var adGroupObjects = [];

  for(var i=1;i<this.feedContent.length;i++){
    var listItem = this.feedContent[i];

    // Check AdGroup Names or extra space at beginning
    if(listItem[this.columnMapper["target ad group"]].charAt[0] === " ") {
      throw new Error("ExtraSpaceInAdGroup_Error: Your adgroup name '" + listItem[this.columnMapper["target ad group"]] + "' contains a space at the beginning. Please remove from feed, this will cause issues.");
    }

    // converts a string into an upperCaseFirstLetter version
    var ucFirstAdGroup = this.upperCaseFirst(listItem[this.columnMapper["target ad group"]]);
    var ucFirstKeyword = this.upperCaseFirst(listItem[this.columnMapper["keyword_full (text)"]]);

    // var colorValue = typeof listItem[this.columnMapper["color (text)"]] !== "undefined" ? listItem[this.columnMapper["color (text)"]] : "";
    var minPriceValue = typeof listItem[this.columnMapper["price_min (number)"]] !== "undefined" ? listItem[this.columnMapper["price_min (number)"]] : listItem[this.columnMapper["price_min (text)"]];

    adGroupObject = {
      adGroup : ucFirstAdGroup,
      campaign : listItem[this.columnMapper["target campaign"]],
      headline : listItem[this.columnMapper["headline (text)"]],
      kwWithUnderscore : ucFirstKeyword,
      discount : listItem[this.columnMapper["discount (number)"]],
      minPrice : minPriceValue,
      saleItems : listItem[this.columnMapper["sale_item_count (number)"]],
      aggregationType : listItem[this.columnMapper["aggregation_type (text)"]],
      brand : listItem[this.columnMapper["brand (text)"]],
      category : listItem[this.columnMapper["category (text)"]],
      gender : listItem[this.columnMapper["gender (text)"]],
      /*color : colorValue*/
    };

    if(EXTRA_COLUMNS.length > 0 && EXTRA_COLUMN_OBJECTVALUES){
      for(var j=0; j<EXTRA_COLUMNS.length; j++){
      	if(EXTRA_COLUMNS[j].toLowerCase().indexOf('url') > -1){
      		adGroupObject[EXTRA_COLUMN_OBJECTVALUES[j].toLowerCase()] = listItem[this.columnMapper[EXTRA_COLUMNS[j].toLowerCase()]];
      	} else {
      		adGroupObject[EXTRA_COLUMN_OBJECTVALUES[j]] = listItem[this.columnMapper[EXTRA_COLUMNS[j]]];
      	}

      }
    }

    if(adGroupObject.campaign != this.campaignName) continue;
    else adGroupObjects.push(adGroupObject);
  }
  if(DEBUG_MODE == 1) {Logger.log("adGroupObjects.length : " + adGroupObjects.length + " with campaignName " + this.campaignName); Logger.log(" ");}
  return adGroupObjects;
};


/**
* @param array adGroupObjects,
* @return array adGroupList, a list of adGroup names
*/
FeedHandler.prototype.getAdGroupList = function(adGroupObjects) {
  var adGroupList = adGroupObjects.map(function(adGroupObject, index, adGroupObjects) {
    return adGroupObject.adGroup;
  });
  return adGroupList;
};


/**
* @param array adGroupObjects,
* @return array adGroupList, a list of adGroup names with min 2 (!) sale items
*/
FeedHandler.prototype.getSaleAdGroupList = function(adGroupObjects) {
  var saleAdGroupList = [];
  for(var i=0; i < adGroupObjects.length; i++) {
    if(adGroupObjects[i].saleItems > 1) saleAdGroupList.push(adGroupObjects[i].adGroup);
  }
  return saleAdGroupList;
};


/**
* @param array adGroupObjects,
* @return array nonSaleaAdGroupList, a list of adGroup names with no sale items
*/
FeedHandler.prototype.getNonSaleAdGroupList = function(adGroupObjects) {
  var nonSaleAdGroupList = [];
  for(var i=0; i < adGroupObjects.length; i++) {
    if(adGroupObjects[i].saleItems < 2) nonSaleAdGroupList.push(adGroupObjects[i].adGroup);
  }
  return nonSaleAdGroupList;
};


/*
* @description converts a string into an upperCaseFirstLetter version
* @param string keywordString
* @return string ucFirstIntraStringlowerCase
* @example input: "ADIDAS_Shoes_STELLA McCARTNEY" >> output: "Adidas_Shoes_Stella Mccartney"
*/
FeedHandler.prototype.upperCaseFirst = function(string) {

  var stringArray = string.split("_");
  var normalizedString = [];

  for (var i=0; i< stringArray.length; i++) {
    var singleNormalizedString = stringArray[i].toLowerCase().replace(/\b[a-z]/g,function(f){return f.toUpperCase();});
    normalizedString.push(singleNormalizedString);
  }
  var ucFirstString  = normalizedString.join("_").replace(/Z_Feed_/g,"z_Feed_").replace(/_Bc_/g,"_BC_").replace(/_Bg_/g,"_BG_").replace(/_Bcg_/g,"_BCG_").replace(/_Cg_/g,"_CG_").replace(/_Bcpc_/g,"_BCPC_").replace(/_Bm_/g,"_BM_");

  // see fix 1.1.3
  var ucFirstIntraStringlowerCase = (function intraStringlowerCasing(ucFirstString) {
    function upperToHyphenLower(match) {
      return match.toLowerCase();
    }
    return string.replace(/'[A-ZÜÄÖ]/g, upperToHyphenLower);
  }) ();

  return ucFirstIntraStringlowerCase;
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 2.1 ADGROUPHANDLER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




function AdGroupHandler(campaignName) {
  this.campaignName = campaignName;
  this.dateYmd = new Date().toISOString().substring(0, 10);
}


/**
* @param array adGroupList
* @param number defaultBid
* @throws {exception} AdGroupOperationException
* @throws {error} NoCampaignFoundError
* @return void
*/
AdGroupHandler.prototype.create = function(adGroupList, defaultBid, storageHandler) {

  try{
    var campaign = AdsApp.campaigns().withCondition('Name = \"' + this.campaignName + '\"').get().next();
    var labelName = this.getStatusLabel("ENABLED");
    Logger.log(" "); Logger.log("Creating " + adGroupList.length + " ad groups, first item: " + adGroupList[0]);

    for(var i=0;i<adGroupList.length;i++) {
      try{
        // Skip if already existing
        if(campaign.adGroups().withCondition('Name = \"' + adGroupList[i].replace('"','\"') + '\"').get().totalNumEntities() !== 0) continue;

        var adGroupBuilder = campaign.newAdGroupBuilder();
        var adGroupOperation = adGroupBuilder.withName(adGroupList[i]).withCpc(defaultBid).withStatus("ENABLED").build();
        if(adGroupOperation.isSuccessful()) { adGroupOperation.getResult().applyLabel(labelName); }
        var adGroupResult = adGroupOperation.isSuccessful() ? adGroupOperation.isSuccessful() : adGroupOperation.getErrors();

				if(adGroupOperation.isSuccessful()) {
          var adGroupCreationLogObject = {
            "id" : adGroupOperation.getResult().getId(),
            "entityName" : adGroupList[i],
            "entityType" : "adGroup",
            "campaignName" : this.campaignName,
            "campaignId" : adGroupOperation.getResult().getCampaign().getId(),
            "adgroupName" : adGroupList[i],
            "adgroupId" : adGroupOperation.getResult().getId(),
            "creationDate" : this.dateYmd,
            "status" : "enabled"
          };
          ADGROUP_CREATION_LOG.push(adGroupCreationLogObject);
          if(DEBUG_MODE === 1){Logger.log("AdgroupCreationLogRow : " + JSON.stringify(adGroupCreationLogObject));}
        }
      } catch (e) {Logger.log("AdGroupOperationException: Specific error : " + e); Logger.log(" ");}

    } // END FOR Loop
  } catch (e) {
    throw new Error("NoCampaignFoundError: No campaign found for " + this.campaignName + ". Please rerun the script after campaign bulk upload. Specific error : " + e + ". stack: " + e.stack);
  }

  if (adGroupList.length > 0 && ADGROUP_CREATION_LOG.length > 0 && SCRIPT_RUN_SCOPE.productionMode_writeToDB == "YES") {
    storageHandler.writeRowstoStorage(ADGROUP_CREATION_LOG, "adGroups");
  }
  ADGROUP_CREATION_LOG = [];
};


/**
* @return array adGroupList
* @throws {exception} ConfigUpdateNeeded
*/
AdGroupHandler.prototype.getAll = function() {
  var adGroupList = [];

  var ignoreRemovedAdGroups = true;
  try{
      if(ADGROUP_CLEANER_CONFIG) {
        if(ADGROUP_CLEANER_CONFIG.ignoreRemovedAdGroups && ADGROUP_CLEANER_CONFIG.ignoreRemovedAdGroups === "NO") {ignoreRemovedAdGroups = false;}
    }
  } catch (e) {Logger.log("Please update your script config with the variable ADGROUP_CLEANER_CONFIG to allow accounting for removed adgroups: var ADGROUP_CLEANER_CONFIG = {'ignoreRemovedAdGroups' : 'YES'}; // Values: YES or NO");}

  var adGroupIterator = ignoreRemovedAdGroups === true ?
    AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"').withCondition('CampaignStatus != REMOVED').withCondition('Status != REMOVED').get() :
    AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"').withCondition('CampaignStatus != REMOVED').get();

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();
    adGroupList.push(adGroup.getName());
  }
  if(DEBUG_MODE == 1) {Logger.log("Total number of adgroups : " + adGroupList.length); Logger.log("First example item: " + adGroupList[0]);}

  return adGroupList;
};


/**
* @param string status
* @return array adGroupList
*/
AdGroupHandler.prototype.getByStatus = function(status) {
  var adGroupList = [];
  var adGroupIterator = // ad groups with no handler label (manually paused) are skipped!
      AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"').withCondition('CampaignStatus != REMOVED').withCondition("Status = " + status).withCondition("LabelNames CONTAINS_ANY ['" + this.getStatusLabel(status) + "']").get();

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();
    adGroupList.push(adGroup.getName());
  }
  if(DEBUG_MODE == 1) {Logger.log("Currently with Status " + status + ": " + adGroupList.length); if(adGroupList.length > 0) { Logger.log("First item: " + adGroupList[0]);}}

  return adGroupList;
};

/**
* @param array adGroupList
* @param string status
* @return void
* @throws AdGroupStatusChangeException
* @todo include operation.getErrors
* @todo add updateLabel method and check for errors
*/
AdGroupHandler.prototype.setStatus = function(adGroupList, status) {

var labelName = this.getStatusLabel(status);
Logger.log("Setting status " + status + " to " + adGroupList.length + " adGroups; "); if(adGroupList.length > 0) { Logger.log("First item: " + adGroupList[0]);}

for(var i=0; i < adGroupList.length; i++) {
  if(adGroupList.length === 0) {
    Logger.log("setStatus: No adgroup statuses to be updated.");
    break;
  }

  try{
    var adGroupIterator = AdsApp.adGroups()
    .withCondition('Name = \"' + adGroupList[i].replace('"','\"') + '\"')
    .withCondition('CampaignName = "' + this.campaignName + '"')
    .withCondition('CampaignStatus != REMOVED')
    .get();

      while (adGroupIterator.hasNext()) {
        var adGroup = adGroupIterator.next();
        status === "ENABLED" ? adGroup.enable() : adGroup.pause();

        if(adGroup.labels().withCondition('Name = "' + labelName + '"').get().totalNumEntities() === 0) adGroup.applyLabel(labelName);

        var activeLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "Activated_by_nrFeedCamps";
        var pausedLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["PAUSED"] : "Paused_by_nrFeedCamps";

        adGroup.removeLabel(labelName === activeLabel ? pausedLabel : activeLabel);
      } // END TRY STATEMENT
    } catch(e) {
      var errorRow = [TIME_STAMP, "AdGroup" , "Failed", "Status change to " + status, this.campaignName, adGroupList[i] , "", "", "", "", "", "", "", "", "", "", "","","","","","","" ];
      ERROR_LOG.push(errorRow);
      ERROR_SUMMARY_OBJECT.adGroupErrorCount++;
      Logger.log("AdGroup Status Change Exception: The operation for adGroup " + adGroupList[i] + " showed an error. Continuing..."); Logger.log("Specific error : " + e);
    }

   } // END FOR LOOP
};


/**
* @param string entityCase
* @return array adGroupList
*/
AdGroupHandler.prototype.getAdGroupsWithout = function(entityCase){

  var adGroupList = [];
  Logger.log(" ");Logger.log("Missing Entity Refill for entityCase " + entityCase);

  var kwPolicyErrorLabel = this.getLabel(POLICY_ERROR_LABELS.keyword);
  var adPolicyErrorLabel = this.getLabel(POLICY_ERROR_LABELS.ad);
  var adGroupIterator;

  var activeLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "Activated_by_nrFeedCamps";
  var pausedLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["PAUSED"] : "Paused_by_nrFeedCamps";

  // Case "keywords"
  if(entityCase === "keywords"){
    adGroupIterator = AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"')
    .withCondition('CampaignStatus != REMOVED')
    .withCondition("Impressions = 0")
    .withCondition("Status = ENABLED")
    .withCondition("LabelNames CONTAINS_NONE ['" + kwPolicyErrorLabel + "']")
    .withCondition("LabelNames CONTAINS_ANY ['" + activeLabel +  "','" + pausedLabel +  "']")
    .forDateRange("LAST_MONTH")
    .get();
  }


  // Case Negatives & Ads
  else {
    adGroupIterator = AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"')
    .withCondition('CampaignStatus != REMOVED')
    .withCondition("Impressions = 0")
    .withCondition("Status = ENABLED")
    .withCondition("LabelNames CONTAINS_ANY ['" + activeLabel +  "','" + pausedLabel +  "']")
    .forDateRange("LAST_MONTH")
    .get();
  }

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();

    if(entityCase === "keywords"){
      var keywordIterator = adGroup.keywords().get();
      if(keywordIterator.totalNumEntities() === 0) adGroupList.push(adGroup.getName());
    }

    if(entityCase === "negatives"){
      var negativeKeywordIterator = adGroup.negativeKeywords().get();
      if(negativeKeywordIterator.totalNumEntities() === 0) adGroupList.push(adGroup.getName());
    }

    var adIterator;
    var paramStdLabel = this.getLabel('paramStdTemplate');
    var paramSaleLabel = this.getLabel('paramSaleTemplate');
    var paramCustomLabel = this.getLabel('paramCustomTemplate');

    if(entityCase === "paramAds"){
      adIterator = adGroup.ads().withCondition("LabelNames CONTAINS_ANY ['" + paramStdLabel + "' , '" + paramSaleLabel + "' , '" + paramCustomLabel + "']").withCondition('Status != DISABLED').get();
      if(adIterator.totalNumEntities() === 0) adGroupList.push(adGroup.getName());
    }

    var staticStdLabel = this.getLabel('staticStdTemplate');
    var staticSaleLabel = this.getLabel('staticSaleTemplate');

    if(entityCase === "staticAds"){
      adIterator = adGroup.ads().withCondition("LabelNames CONTAINS_ANY ['" + staticStdLabel + "' , '" + staticSaleLabel + "']").withCondition('Status != DISABLED').get();
      if(adIterator.totalNumEntities() === 0) adGroupList.push(adGroup.getName());
    }

  }
  Logger.log("adGroupList length for entityCase missing " + entityCase + " : " + adGroupList.length);

  // Enable entity refill to randomly start from the end
  adGroupList = adGroupList.sort();
  if(Math.random() >= 0.5) adGroupList = adGroupList.reverse();

  return adGroupList;
};


/**
* @param string status
* @return string labelName
*/
AdGroupHandler.prototype.getStatusLabel = function(status) {

  var labelName = status == "ENABLED" ? "Activated_by_nrFeedCamps": "Paused_by_nrFeedCamps";

  if(typeof(ADGROUP_STATUS_LABELS) !== "undefined") {
    if(ADGROUP_STATUS_LABELS) labelName = ADGROUP_STATUS_LABELS[status];
  }

  try {
    var existingLabel = AdsApp.labels().withCondition('Name = "' + labelName + '"').get().next();
  } catch (e) {
    var newLabel = AdsApp.createLabel(labelName);
  }
  return labelName;
};


/**
* @param string labelString
* @return string labelName
*/
AdGroupHandler.prototype.getLabel = function(labelString) {
  try {
    var existingLabel = AdsApp.labels().withCondition('Name = "' + labelString + '"').get().next();
  } catch (e) {
    var newLabel = AdsApp.createLabel(labelString);
  }
  return labelString;
};

/*
* @param {string} stringIdentifier
* @return {array} labels
*/
AdGroupHandler.prototype.getLabelsByString = function(stringIdentifier){

  var errorLabels = [];
  var labelIterator = AdsApp.labels().withCondition('Name CONTAINS_IGNORE_CASE "' + stringIdentifier + '"').get();

  while(labelIterator.hasNext()){
    var label = labelIterator.next();
    errorLabels.push(label.getName());
  }
  return errorLabels;
};


/*
* @return {void}
*/
AdGroupHandler.prototype.pauseAdGroups_withNonServingKeywords = function() {

  if(typeof PAUSE_NONSERVING_ELEMENTS == "undefined") return;
  if(PAUSE_NONSERVING_ELEMENTS === false) return;

  var lowVolLabel = this.getLabel("Paused_by_nrFeedCamps_AG_LowVolume");

  var adGroupIterator = AdsApp.adGroups()
    .withCondition("Status = ENABLED")
    .withCondition("Impressions = 0").forDateRange("LAST_30_DAYS")
    .withCondition("CampaignName CONTAINS_IGNORE_CASE '" + this.campaignName + "'")
    .withCondition("CampaignStatus = ENABLED")
    .get();

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();
    var keywordIterator_noVol = adGroup.keywords().forDateRange("LAST_30_DAYS").withCondition("FirstPageCpc > 0").withCondition("Status = ENABLED").withCondition("Impressions = 0").get();
    var keywordIterator_withVol = adGroup.keywords().forDateRange("LAST_30_DAYS").withCondition("Impressions > 0").withCondition("Status = ENABLED").get();
    var keywordIterator_hasActiveKws = adGroup.keywords().withCondition("Status = ENABLED").get();

    if(keywordIterator_noVol.totalNumEntities() === 0 && keywordIterator_withVol.totalNumEntities() === 0 && keywordIterator_hasActiveKws.totalNumEntities() > 0) {
      adGroup.pause();

      var activeLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "Activated_by_nrFeedCamps";
      var pausedLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["PAUSED"] : "Paused_by_nrFeedCamps";

      adGroup.removeLabel(activeLabel);
      adGroup.applyLabel(lowVolLabel);
    }
  } // END WHILE Loop AdGroup
};


AdGroupHandler.prototype.setScopeLabel = function(currentAllAdGroups){
	this.getLabel(AG_SCOPE_LABEL_FALLBACK);

	var activeLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["ENABLED"] : "Activated_by_nrFeedCamps";
    var pausedLabel = typeof ADGROUP_STATUS_LABELS != "undefined" ? ADGROUP_STATUS_LABELS["PAUSED"] : "Paused_by_nrFeedCamps";

	for(var i = 0; i < currentAllAdGroups.length; i++){
	 	var adgroupIterator = AdsApp.adGroups()
	 	.withCondition("Name = \'"+currentAllAdGroups[i]+"\'")
	 	.withCondition("Status != REMOVED")
	 	.withCondition("LabelNames CONTAINS_ANY [\'"+activeLabel+"\',\'"+pausedLabel+"\']")
	 	.withCondition("LabelNames CONTAINS_NONE [\'"+AG_SCOPE_LABEL_FALLBACK+"\']")
	 	.get();

	 	if(adgroupIterator.hasNext()){
	 		var adgroup = adgroupIterator.next();
	 		Logger.log("AdGroup name to apply scope label to: "+adgroup.getName());
	 		adgroup.applyLabel(AG_SCOPE_LABEL_FALLBACK);
	 	}
	}
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 2.2 ADGROUPLIST @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





/*
* @param {array} list, a list of adgroup names
*/

function AdGroupList(list) {
  this.listContent = list;
  this.getList = function() {
    return this.listContent;
  };

  /**
  * @param object referenceList
  * @return array diffList
  */
  this.returnIfFoundIn = function(referenceList) {
    var diffList = [];

    for(var i=0;i<this.listContent.length;i++){
      var listItem = this.listContent[i].toString();
      if(referenceList.indexOf(listItem)!=-1) diffList.push(listItem);
    }
    if(DEBUG_MODE == 1) {Logger.log("returnIfFoundIn diffList: Length = " + diffList.length + ";"); if(diffList.length > 0) { Logger.log("First item: " + diffList[0]);}}
    return diffList;
  };

  /**
  * @param object referenceObject
  * @return array diffList
  */
  this.returnIfNotFoundIn = function(referenceList) {
    var diffList = [];
    if(INPUT_SOURCE_MODE === "SQA") referenceList = JSON.stringify(referenceList).toString().split(",");

    for(var i=0;i<this.listContent.length;i++){
      var listItem = this.listContent[i].toString();
      if(referenceList.indexOf(listItem) == -1) diffList.push(listItem);
    }
    if(DEBUG_MODE == 1) {Logger.log("returnIfNotFoundIn diffList: Length = " + diffList.length + ";"); if(diffList.length > 0) {Logger.log("First item: " + diffList[0]);}}
    return diffList;
  };

  /**
  * @param array fullObjectList
  * @return array filteredObjectList, object list based on listContent as reference list
  * @todo add throws exception NonMatchingInput exception, arrays do not have the same length
  */
  this.getObjectsFrom = function(fullObjectList) {
    var filteredObjectList = [];

    if(DEBUG_MODE === 1) Logger.log("getObjectsFrom method: fullObjectList.length: " + fullObjectList.length);
    if(DEBUG_MODE === 1) Logger.log("this.listContent : " + this.listContent);

    for(var i=0;i < fullObjectList.length;i++){
      var singleAdGroup = fullObjectList[i].adGroup;
      if(this.listContent.indexOf(singleAdGroup)!== -1)
        filteredObjectList.push(fullObjectList[i]);
      else continue;
    }
    if(DEBUG_MODE === 1) {Logger.log("getObjectsByAdGroupFrom filteredObjectList: Length = " + filteredObjectList.length + ";"); if(filteredObjectList.length > 0) {Logger.log("First item: " + JSON.stringify(filteredObjectList[0])); Logger.log(" ");}}

    return filteredObjectList;
  };
}






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 3.1 ADTEMPLATEPARSER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function AdTemplateParser2(spreadsheetId, campaignInfoConfig, setAdsConfig){
  this.allSheets = SpreadsheetApp.openById(spreadsheetId).getSheets();
  this.campaignInfoConfig = campaignInfoConfig;
  this.setAdsConfig = setAdsConfig;
}

/*
* @return bool true, if no error is thrown
* @throws {error} TabTemplateAndAggregationTypeMismatch
* @throws {error} SQA_MissingDefaultTab_Error
*/
AdTemplateParser2.prototype.validateSheetsAndAggregationTypes = function(fullObjectList){
  var missingAdTemplates = [];
  var aggregationTypesInFeed = [];
  var sheetNames = [];

  // Generate sheet name list
  for(var i=0; i<this.allSheets.length; i++) {
    sheetNames.push(this.allSheets[i].getName());
  }

  if(INPUT_SOURCE_MODE === "SQA" && sheetNames.indexOf("default") == -1) {
		throw new Error("SQA_MissingDefaultTab_Error: Your SQA ad template must contain a 'default' tab to serve special aggregation type combinations. Please ADD!");
  }

  // Deduplicate aggregation types
  for(i=0;i<fullObjectList.length; i++){
    var aggrType = fullObjectList[i].aggregationType;
    if(aggregationTypesInFeed.indexOf(aggrType) === -1) aggregationTypesInFeed.push(aggrType);
  }
  Logger.log("aggregationTypesInFeed : " + aggregationTypesInFeed + ". Missing any? Check your exact campaign names! They must match the configured campaign prefix.");

  // Check if all aggr types have an ad sheet
  for(i=0; i<aggregationTypesInFeed.length; i++){
    if(sheetNames.indexOf(aggregationTypesInFeed[i]) == -1) {
      missingAdTemplates.push(aggregationTypesInFeed[i]);
    }
  }

  if(missingAdTemplates.length > 0 && INPUT_SOURCE_MODE === "ADBUILD") {
    throw new Error("TabTemplateAndAggregationTypeMismatch: Not all aggregation types have a corresponding ad template. Missing ad templates: " + missingAdTemplates);
  }
};


/*
* @return {object} templateObject
* @throws {exception}

*/
AdTemplateParser2.prototype.getAllTemplates = function(){

  var templateObject = {};

  for(var i=0; i<this.allSheets.length; i++){

    try{
      // Find appropriate width
      var lastColumn = this.getLastNonEmptyColumn(this.allSheets[i]);
      var sheetData = this.allSheets[i].getRange(1,1,6,lastColumn+1).getValues();
      var sheetName = this.allSheets[i].getName().toString();
      var columnHeaders = sheetData[0];

      if(sheetName === "(errors)" || sheetName === "(urls)") {continue;}

      templateObject[sheetName] = {};
      templateObject[sheetName]["staticTemplates"] = [];
      templateObject[sheetName]["paramTemplates"] = [];

      for(var j=1; j<columnHeaders.length; j++){

        // Skip sale template if needed
        if(this.setAdsConfig.standard === 0 && this.setAdsConfig.sale === 1 && columnHeaders[j] !== "SALE") continue;
        if(this.setAdsConfig.standard === 1 && this.setAdsConfig.sale === 0 && columnHeaders[j] === "SALE") continue;

        var templateInfo = this.getTemplateNameAndType(columnHeaders[j]);

        // Skip sale ads if needed
        if(this.setAdsConfig.sale === 0  && columnHeaders[j].indexOf("SALE") != -1) continue;
        if(this.setAdsConfig.sale === 0  && columnHeaders[j].indexOf("Sale") != -1) continue;
        if(sheetData[1][j].length === 0) continue;

        var firstColumnData = this.allSheets[i].getRange(1,1,6,1).getValues();
				var rowMapper = this.getRowMapper(firstColumnData);

				var singleAd =  {
					"type" : templateInfo.type,
					"h1" : sheetData[rowMapper.headlinepart1][j],
					"h2" : sheetData[rowMapper.headlinepart2][j],
					"desc" : sheetData[rowMapper.description1][j]
				};

				if(typeof rowMapper.headlinepart3 !== "undefined") singleAd.h3 = sheetData[rowMapper.headlinepart3][j];
				if(typeof rowMapper.description2 !== "undefined") singleAd.desc2 = sheetData[rowMapper.description2][j];

				templateObject[sheetName][templateInfo.name].push(singleAd);

        /* templateObject[sheetName][templateInfo.name].push({
          "type" : templateInfo.type,
          "h1" : sheetData[1][j],
          "h2" : sheetData[2][j],
          "desc" : sheetData[3][j]
        });*/

      } // END FOR columnHeaders
    } catch(e){Logger.log("TemplateDataFetch_Exception for type " + sheetName + " : " + e + " . stack : " +e.stack);}
  } // End for-Loop Sheets

  if(DEBUG_MODE === 1) {Logger.log("templateObject : "  + JSON.stringify(templateObject)); Logger.log(" ");}

  return templateObject;
};


/*
* @param array firstColumn
* @return object rowMapper
*/
AdTemplateParser2.prototype.getRowMapper = function(firstColumn) {
  var rowMapper = {};

  for(var k=1; k<firstColumn.length; k++){
    rowMapper[firstColumn[k][0].toLowerCase()] = k;
  }

  if(typeof rowMapper.description1 == "undefined" && typeof rowMapper.description !== "undefined") rowMapper.description1 = rowMapper.description;

  return rowMapper;
}

/*
* @return int lastColIndex
* @throws error ColumnMismatchError
* @throws error KeyValueMismatchError
*/
AdTemplateParser2.prototype.getLastNonEmptyColumn = function(sheet){

  var lastColSecond = this.getLastColumnIndexByRow(sheet,2);
  var lastColThird = this.getLastColumnIndexByRow(sheet,3);

  var lastColIndex;
  if(lastColSecond === lastColThird) lastColIndex = lastColSecond;
  if(lastColIndex === undefined) throw new Error("LastNonEmptyColumn_MismatchError: Not all values seem to filled for the last column, see rows 2 and 3.");

  return lastColIndex;
};

/*
* @param {object} spreadsheet
* @param {int} rowNum
* @return {int} ct+1
*/
AdTemplateParser2.prototype.getLastColumnIndexByRow = function(spreadsheet, rowNum){
  var column = spreadsheet.getRange(rowNum,1,1,20);
  var values = column.getValues()[0]; // get all data in one call

  var ct = 0;
  for(var i=values.length-1;i>0;i--){
    if(ct !== 0) break;
    if(values[i] !== "") ct = i;
  }
  return ct+1;
};

/*
* @param {string} columnName
* @return {object} templates
*/
AdTemplateParser2.prototype.getTemplateNameAndType = function(columnName){

  var colName = columnName;
  var template = {};

  if(colName.indexOf("Static Std") != -1) template = { "name" : "staticTemplates", "type" : "staticStdTemplate"};
  if(colName.indexOf("Static Sale") != -1) template = { "name" : "staticTemplates", "type" : "staticSaleTemplate"};
  if(colName.indexOf("Param Std") != -1) template = { "name" : "paramTemplates", "type" : "paramStdTemplate"};
  if(colName.indexOf("Param Custom") != -1) template = { "name" : "paramTemplates", "type" : "paramCustomTemplate"};
  if(colName.indexOf("Param Sale") != -1) template = { "name" : "paramTemplates", "type" : "paramSaleTemplate"};

  return template;
};




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 3.2 ADHANDLER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function AdHandler(campaignName, adGroupObjects, adTemplateObj) {
  this.campaignName = campaignName;
  this.adGroupObjects = adGroupObjects;
  this.adTemplateObj = adTemplateObj;
  this.adErrorCount = 0;
}


/**
* @param bool withParam, ie if ads are to be creats withParam = 1 = yes or without
* @return void
* @throws exception Missing Entity Exception
* @throws exception AdCreation Exception
*/
AdHandler.prototype.createExpAdsWithParams = function(withParam, urlHandler) {

  Logger.log("Creating 2 ads for adType withParam = " + withParam + " for " + this.adGroupObjects.length + " adGroups.");
  if(DEBUG_MODE == 1) {Logger.log("adTemplateObj : "); Logger.log(this.adTemplateObj); Logger.log(" ");}

  // Instantiate fallback option via bulk upload for policy errors
  var columns = ["Campaign","Ad Group","Labels","Headline 1", "Headline 2", "Headline 3","Description Line 1", "Description Line 2", "Path 1", "Path 2", "Final URL"];
  this.upload = AdsApp.bulkUploads().newCsvUpload(columns);
  this.adUploadRows = 0;

  for(var i = 0; i < this.adGroupObjects.length; i++) {

    var adGroupNameSplit = this.adGroupObjects[i].kwWithUnderscore.split("_");
    if(INPUT_SOURCE_MODE === "SQA") adGroupNameSplit = this.adGroupObjects[i].kwWithUnderscore.replace(/ /g, "_"). split("_");

    var adGroup;

    try {
      adGroup = AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"').withCondition('CampaignStatus != REMOVED').withCondition('Name = \"' + this.adGroupObjects[i].adGroup.replace('"','\"') + '\"').get().next();
    } catch(e) { Logger.log("Missing Entity Exception: Requested AdGroup " + this.adGroupObjects[i].adGroup + " was not found. No worries if only in preview mode, ad group needs to exist.");}

    if(DEBUG_MODE == 1) {Logger.log("adGroupObject : " + JSON.stringify(this.adGroupObjects[i]));}

    var aggrType = this.adGroupObjects[i].aggregationType;
    var topCategory = this.adGroupObjects[i].topCategory;

    try{
			var aggrType_Template = this.adTemplateObj[aggrType];

			// Use default template in SQA if not speficified for aggrType
			if(INPUT_SOURCE_MODE === "SQA" && typeof this.adTemplateObj[aggrType] == "undefined") aggrType_Template = this.adTemplateObj["default"];

      var adTemplates = withParam === 1 ? aggrType_Template.paramTemplates : aggrType_Template.staticTemplates;

      // LOOP through all templates
      for(var j=0; j<adTemplates.length; j++) {

        var adTemplate = adTemplates[j];

        // Execute main ad creation logic
        var label = this.getLabel(adTemplate.type);
        var headlineCutOffLabel = this.getLabel("headline1_+30Chars_cutOff");
        var adPolicyErrorLabel = this.getLabel(POLICY_ERROR_LABELS.ad);

        var headline, headline2, headline3, description, description2, adOperation;

        // Replace placeholder variables
        headline = this.replaceVariablesByType(adTemplate.h1, "headline", this.adGroupObjects[i]);
        headline2 = this.replaceVariablesByType(adTemplate.h2, "headline2", this.adGroupObjects[i]);
        description = this.replaceVariablesByType(adTemplate.desc, "description", this.adGroupObjects[i]);

        headline3 = typeof adTemplate.h3 == "undefined" ? "" : this.replaceVariablesByType(adTemplate.h3, "headline3", this.adGroupObjects[i]);
        description2 = typeof adTemplate.desc2 == "undefined" ? "" : this.replaceVariablesByType(adTemplate.desc2, "description2", this.adGroupObjects[i]);


        // Cut off long headlines by word, not by character
        headline = this.cutOffByWordOrChar(headline, this.adGroupObjects[i]);

        var pathArray = this.pathBuilder(adGroupNameSplit);
        var finalUrl = urlHandler.createUrlByConfig(this.adGroupObjects[i]);

				adOperation = adGroup.newAd().expandedTextAdBuilder()
					.withHeadlinePart1(headline)
					.withHeadlinePart2(headline2)
					.withHeadlinePart3(headline3)
					.withDescription(description)
					.withDescription2(description2)
					.withPath1(pathArray[0])
					.withPath2(pathArray[1])
					.withFinalUrl(finalUrl)
					.build();

        if(DEBUG_MODE == 1) Logger.log("full URL : " + finalUrl);
        var adGroupResult = adOperation.isSuccessful() ? adOperation.getResult().applyLabel(label) : adOperation.getErrors();

				var uploadRow = {
					"Campaign": this.campaignName,
					"Ad Group" : this.adGroupObjects[i].adGroup.replace('"','\"'),
					"Labels" : label,
					"Headline 1" : headline,
					"Headline 2" : headline2,
					"Headline 3" : headline3,
					"Description Line 1" : description,
					"Description Line 2" : description2,
					"Path 1" : pathArray[0],
					"Path 2" : pathArray[1],
					"Final URL" : finalUrl
				};

        // Mark sliced headlines with extra label
        if(headline.length > 30 && adOperation.isSuccessful()) adOperation.getResult().applyLabel(headlineCutOffLabel);


        ////////////////////
        // AD ERROR HANDLING
        ////////////////////

        if(adOperation.getErrors().length > 0) {
          var errorRow = [TIME_STAMP, "Ad" , "Disapproved", adOperation.getErrors(), this.campaignName, this.adGroupObjects[i].adGroup , label, "", "", "", finalUrl, "", this.adGroupObjects[i].headline, adTemplate.h2, adTemplate.desc, pathArray[0], pathArray[1],"","","","", adTemplate.h3, adTemplate.desc2];
          ERROR_LOG.push(errorRow);
          ERROR_SUMMARY_OBJECT.adErrorCount++;

          // Cases: POLICY_ERROR, LINE_TOO_WIDE, KEYWORD_HAS_INVALID_CHARS, INVALID_FEED_NAME, MISSING_PROTOCOL_IN_FINAL_URL, MALFORMED_FINAL_URL, INVALID_TLD_IN_FINAL_URL
          var labelIterator;

          // Ad Fallback operations in case of policy errors
          if(adOperation.getErrors().toString().indexOf("POLICY") != -1) {

            labelIterator = adGroup.labels().withCondition('Name = "' + adPolicyErrorLabel + '"').get();
            if(labelIterator.totalNumEntities() === 0) adGroup.applyLabel(adPolicyErrorLabel);
            if(DEBUG_MODE === 1) Logger.log("Error label " + adPolicyErrorLabel + " applied to adgroup " + adGroup.getName());

            // Brand char replace l with i, and vice versa
            var brand = this.adGroupObjects[i].brand;
            if(brand.indexOf("i") != -1 || brand.indexOf("l") != -1 || brand.length<7) {

              if(DEBUG_MODE === 1)Logger.log("Ad creation retry to adgroup " + adGroup.getName() + " with L / I character change or brand explode.");
              var regexString = new RegExp(brand);
              var path0;

              // Headline1 Case 1: small L to Capital I
              if(brand.indexOf("l") != -1){
                headline = headline.replace(regexString, brand.replace("l","I"));
                description = description.replace(regexString, brand.replace("l","I"));
                path0 = pathArray[0].replace(regexString, brand.replace("l","I"));
              }

              // Headline1 Case 2: Capital I to small L
              if(brand.indexOf("I") != -1 && brand.indexOf("l") == -1) {
                headline = headline.replace(regexString, brand.replace("I","l"));
                description = description.replace(regexString, brand.replace("I","l"));
                path0 = pathArray[0].replace(regexString, brand.replace("I","l"));
              }

              // Headline1 Case 3: Split single letters with extra space
              if(brand.indexOf("I") == -1 && brand.indexOf("l") == -1 && brand.length<7) {
                var brandExploded = brand.split("").join(" ");
                headline = headline.replace(regexString, brandExploded).replace("©","");
                // description = description.replace(regexString, brandExploded);
                path0 = pathArray[1];
                pathArray[1] = "";
              }

              var fallBackAdOperation = adGroup.newAd().expandedTextAdBuilder()
              .withHeadlinePart1(headline)
              .withHeadlinePart2(headline2)
              .withHeadlinePart2(headline3)
              .withDescription(description)
              .withDescription(description2)
              .withPath1(path0)
              .withPath2(pathArray[1])
              .withFinalUrl(finalUrl)
              .build();

              if(fallBackAdOperation.getErrors().length > 0 && fallBackAdOperation.getErrors().toString().indexOf("POLICY") != -1) {
								uploadRow = {
									"Campaign": this.campaignName,
									"Ad Group" : this.adGroupObjects[i].adGroup.replace('"','\"'),
									"Labels" : label,
									"Headline 1" : headline,
									"Headline 2" : headline2,
									"Headline 3" : headline3,
									"Description Line 1" : description,
									"Description Line 2" : description2,
									"Path 1" : pathArray[0],
									"Path 2" : pathArray[1],
									"Final URL" : finalUrl
								};
              }
						} // END IF Policy error Letter L/I Swap retry

						this.appendUploadRow(uploadRow);

          } // END IF Policy error

          // Label adgroups in case of other errors
          var errorTextArray = adOperation.getErrors().toString().split(" : ");
          if(DEBUG_MODE === 1) Logger.log("errorTextArray : " + errorTextArray + ". length : " + errorTextArray.length);
          var errorText = errorTextArray.length === 3 ? "adError_" & errorTextArray[0].toLowerCase() + "_" + errorTextArray[2] : errorTextArray[0].toLowerCase();
          var errorLabel = this.getLabel(errorText.toString());

          labelIterator = adGroup.labels().withCondition('Name = "' + errorLabel + '"').get();
          if(errorLabel.length > 1 && labelIterator.totalNumEntities() === 0) adGroup.applyLabel(errorLabel);
          if(DEBUG_MODE === 1) Logger.log("Error label " + errorLabel + " applied to adgroup " + adGroup.getName());

        } // END IF errors
        if(DEBUG_MODE == 1) {Logger.log("Ad created for " + aggrType + " WithParam=" + withParam + " for: "+ this.adGroupObjects[i].adGroup + " with label : " + label);}

      } // END FOR IN Loop
    }
    catch(e){
      ERROR_SUMMARY_OBJECT.adErrorCount++;
      Logger.log("AdCreation Exception: The operation for adGroup " + this.adGroupObjects[i].adGroup + " showed an error. Continuing..."); Logger.log("Specific error : " + e + ". " +  e.stack + ". Again, no worries if adgroup doesn't exist yet."); Logger.log(" ");
    }
  } // END FOR LOOP adgroupObjects

  if(this.adUploadRows > 0) this.upload.apply();
};


/**
* @param string oldHeadline
* @param object adGroupObject
* @return string headline
*/
AdHandler.prototype.cutOffByWordOrChar = function(oldHeadline, adGroupObject) {

  var headline = oldHeadline;
  var oldHeadline_LowerCase = oldHeadline.toLowerCase();
  var containsKwInsertion = oldHeadline_LowerCase.indexOf("{keyword:") !== -1 ? true : false;

  // Cut off headline if NOT contains keyword insertion
  if(oldHeadline.length > 30 && containsKwInsertion === false) {
    headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-1).join(" ");

    // If still too long cut off 2-4 words
    if(headline.length > 30) headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-2).join(" ");
    if(headline.length > 30) headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-3).join(" ");
    if(headline.length > 30) headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-4).join(" ");
  }

  // Cut off headline if contains keyword insertion
  if(oldHeadline.length > 40 && containsKwInsertion === true) {
    headline = headline.replace("}","");
    headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-1).join(" ");

    // If still too long cut off 2-4 words
    if(headline.length > 39) headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-2).join(" ");
    if(headline.length > 39) headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-3).join(" ");
    if(headline.length > 39) headline = oldHeadline.split(" ").slice(0,oldHeadline.split(" ").length-4).join(" ");

    headline = headline + "}";
    headline = headline.replace(" }","}").replace(" &}","}");
  }

  return headline;
};


/**
* @param string name
* @return string labelName
*/
AdHandler.prototype.getLabel = function(name) {
  var labelName = name;
  try {
    var existingLabel = AdsApp.labels().withCondition('Name = "' + labelName + '"').get().next();
  } catch (e) { var newLabel = AdsApp.createLabel(labelName); }
  return labelName;
};


/*
* @param {object} uploadRow, all related info for the new ad
* @return {void}
*/
AdHandler.prototype.appendUploadRow = function(uploadRow) {

	if (typeof AD_HEADLINE_3 !== "undefined") uploadRow["Headline 3"] = AD_HEADLINE_3;
	if (typeof AD_DESCRIPTION_LINE_2 !== "undefined") uploadRow["Description Line 2"] = AD_DESCRIPTION_LINE_2;

	this.upload.append(uploadRow);
	this.adUploadRows++;
};


/*
* @param {string} adString
* @param {string} adComponent
* @param {object} adGroupObject
* @return {object} updatedAdString
* @throws error
*/
AdHandler.prototype.replaceVariablesByType = function(adString, adComponent, adGroupObject){
  var updatedAdString = adString;

  var AD_VARIABLE_FALLBACK_VALUES = {
    "gender" : "Aktive",
    "category" : "Fashion",
    "brand" : "Top-Designern"
  };

  // UpperCaseFirst letter
  // string.charAt(0).toUpperCase() + string.slice(1);

  // Enable static gender replace
  if(adString.indexOf("$gender$") != -1 && adGroupObject.gender.indexOf(",") == -1) {
    updatedAdString = updatedAdString.replace(/\$gender\$/g, adGroupObject.gender).replace(/\//g, "");
    updatedAdString = updatedAdString.charAt(0).toUpperCase() + updatedAdString.slice(1);
  }

  // Enable static category replace
  if(adString.indexOf("$category$") != -1 && adGroupObject.category.indexOf(",") == -1) {
    updatedAdString = updatedAdString.replace(/\$category\$/g, adGroupObject.category).replace(/\//g, "");
    updatedAdString = updatedAdString.charAt(0).toUpperCase() + updatedAdString.slice(1);
  }

  // Enable static brand replace
  if(adString.indexOf("$brand$") != -1 && adGroupObject.brand.indexOf(",") == -1) {
    updatedAdString = updatedAdString.replace(/\$brand\$/g, adGroupObject.brand).replace(/\//g, "");
    updatedAdString = updatedAdString.charAt(0).toUpperCase() + updatedAdString.slice(1);
  }

  // Allow extra words after headline variable
  if(adComponent === "headline") {
    updatedAdString = updatedAdString.replace("$$headline$$","$headline$").replace("$$Headline$$","$headline$").replace("$Headline$","$headline$");
    var regexHeadline = new RegExp(adGroupObject.headline);
    updatedAdString = updatedAdString.replace(/\$headline\$/g, adGroupObject.headline).replace(/\//g, "");
  }

  // Enable copyright symbol insert after brand
  if(typeof AD_HEADLINE_COPYRIGHT_INSERT !== "undefined" && AD_HEADLINE_COPYRIGHT_INSERT == 1 && adComponent === "headline" && adGroupObject.brand.length > 0 && adGroupObject.brand.indexOf(",") == -1 && updatedAdString.length < 30) {
    var regexString = new RegExp(adGroupObject.brand);
    updatedAdString = updatedAdString.replace(regexString, adGroupObject.brand + "©");
  }

  return updatedAdString;
};


/*
* @param {array} adGroupNameSplit
* @return {array} pathArray
*/
AdHandler.prototype.pathBuilder = function(adGroupNameSplit) {
  var pathArray = [];

  // Remove stop words from path
  if(typeof AD_PATHBUILDER_WORDS_TO_REMOVE != "undefined"){
   var stopWords = AD_PATHBUILDER_WORDS_TO_REMOVE;
   if(stopWords.length > 0) {
     for(var i=0; i<stopWords.length;i++){
        if(adGroupNameSplit.indexOf(stopWords[i]) !=-1) {
          var index =adGroupNameSplit.indexOf(stopWords[i]);
          adGroupNameSplit.splice(index, 1);
        }
      } // END FOR Loop Stopwords
    } // END IF Stopwords > 0
  }

  pathArray.push(adGroupNameSplit[0].length > 15 ? adGroupNameSplit[0].replace(/ /g,"-").substring(0,14) : adGroupNameSplit[0].replace(/ /g,"-"));
  var getPath2 = function() {
    // Case 0. no second element
    if (adGroupNameSplit.length === 1) { return "";

    // Case 1. if second element shorter than 16, use second
    } else if (adGroupNameSplit.length === 2 && adGroupNameSplit[1].length < 16) {
      return adGroupNameSplit[1].replace(" & ","-").replace(/ /g,"-");

    // Case 2: if third element is shorter than 16, use third
    } else if(adGroupNameSplit.length === 3 && adGroupNameSplit[2].length < 16) {
      return adGroupNameSplit[2].replace(" & ","-").replace(/ /g,"-");

    // Case 3. if third element longer than 15 and second element short enough, use second
    } else if (adGroupNameSplit.length > 2 && adGroupNameSplit[2].length > 15 && adGroupNameSplit[1].length < 16) {
     return adGroupNameSplit[1].replace(" & ","-").replace(/ /g,"-");

    } else {return ""; }
  };
  pathArray.push(getPath2());
  return pathArray;
};



/*
* @return {int} adErrorCount
*/
AdHandler.prototype.getAdErrorCount = function() {
  return this.adErrorCount;
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 4. KEYWORDHANDLER @prototype
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function KeywordHandler(campaignName, adGroupObjects) {
  this.adGroupObjects = adGroupObjects;
  this.campaignName = campaignName;
  this.keywordErrorCount = 0;
}

/** adds three types of keywords: exact, exact reverse und phrase or modified
* @param array bidRange
* @return void
* @throws exception NoNewElementsException
* @throws exception MissingEntityException
*/
KeywordHandler.prototype.addKwsWithRelativeBids = function(newKeywordConfig, urlHandler) {
  Logger.log("Creating 1-3 keywords for " + this.adGroupObjects.length + " adGroups.");

  for(var i=0; i<this.adGroupObjects.length;i++) {
  	if(DEBUG_MODE === 1) Logger.log("adgroup name: "+this.adGroupObjects[i].adGroup);
    var adGroup;
    try {
      adGroup = AdsApp.adGroups().withCondition('CampaignName = "' + this.campaignName + '"').withCondition('CampaignStatus != REMOVED').withCondition('Name = \"' + this.adGroupObjects[i].adGroup.replace('"','\"') + '\"').get().next();
    }
    catch(e) {Logger.log("Missing Entity Exception: Ad group " + this.adGroupObjects[i].adGroup + " was not found. No worries if in preview mode, ad group needs to exist.");}

    try{
      var finalUrl = urlHandler.createUrlByConfig(this.adGroupObjects[i]);

      var keywordBuilder = adGroup.newKeywordBuilder();
      var targetBid = this.calculateRelativeBid(newKeywordConfig.Bid_Range,this.adGroupObjects[i].minPrice, newKeywordConfig.Conservative_Factor);
      var kwPolicyErrorLabel = this.getLabel(POLICY_ERROR_LABELS.keyword);
      var exactKeywordOp, reverseExactKeywordOp, nonExactKeywordOp, nonExactBid, sameMt_duplFound;

      // Allowing for matchtype split campaigns
      if(NEW_CAMPAIGN_CONFIG.allowedMatchTypes === "exact" || NEW_CAMPAIGN_CONFIG.allowedMatchTypes === "all" || NEW_CAMPAIGN_CONFIG.allowedMatchTypes === "-") {
        var exactKw = '[' + this.adGroupObjects[i].kwWithUnderscore.replace(/\_/g,' ').replace(/\//g,' ') + ']';

        // Check if keyword URL is needed
        exactKeywordOp = newKeywordConfig.SET_KEYWORD_URLS == "YES" ?
          keywordBuilder.withText(exactKw).withCpc(targetBid).withFinalUrl(finalUrl).build() :
        keywordBuilder.withText(exactKw).withCpc(targetBid).build();

        var exactKeywordResult = exactKeywordOp.isSuccessful() ? exactKeywordOp.isSuccessful() : exactKeywordOp.getErrors();

        // var reverseExactKw = '[' + this.adGroupObjects[i].kwWithUnderscore.split("_").reverse().join(" ") + ']';
        /* reverseExactKeywordOp = newKeywordConfig.SET_KEYWORD_URLS == "YES" ?
          keywordBuilder.withText(reverseExactKw).withCpc(targetBid).withFinalUrl(finalUrl).build() :
        keywordBuilder.withText(reverseExactKw).withCpc(targetBid).build();
        var exactKeywordReverseResult = reverseExactKeywordOp.isSuccessful() ? reverseExactKeywordOp.isSuccessful() : reverseExactKeywordOp.getErrors(); */

        // Checking for and labeling duplicate keywords
        var exactKwObject = exactKeywordOp.getResult();
        sameMt_duplFound = this.markDuplicateKeywords(exactKw, adGroup.getName());
        if(sameMt_duplFound === 1) exactKwObject.applyLabel(this.getLabel(DUPLICATE_KW_LABELS.sameMatchtype_new));

        /* var revExactKwObject = reverseExactKeywordOp.getResult();
        sameMt_duplFound = this.markDuplicateKeywords(reverseExactKw, adGroup.getName());
        if(sameMt_duplFound === 1) revExactKwObject.applyLabel(this.getLabel(DUPLICATE_KW_LABELS.sameMatchtype_new)); */
      }


      // If neither phrase nor modbroad desired
      if(newKeywordConfig.NonExact_Phrase_or_MobBroad !== "-" && NEW_CAMPAIGN_CONFIG.allowedMatchTypes != "exact") {
        var phraseKw = '\"' + this.adGroupObjects[i].kwWithUnderscore.replace(/\_/g,' ') + '\"';
        var modBroadKw = '+' + this.adGroupObjects[i].kwWithUnderscore.replace(/\_/g,' ').replace(/\s/g,' +');
        var nonExactKw = newKeywordConfig.NonExact_Phrase_or_MobBroad == "MB" ? modBroadKw : phraseKw;

        nonExactBid = Math.round(targetBid * newKeywordConfig.NonExact_BidMultiplier * 100) / 100;

        // Check if keyword URL is needed
        nonExactKeywordOp = newKeywordConfig.SET_KEYWORD_URLS == "YES" ?
          keywordBuilder.withText(nonExactKw).withCpc(nonExactBid).withFinalUrl(finalUrl).build() :
          keywordBuilder.withText(nonExactKw).withCpc(nonExactBid).build();

        var nonExactKeywordResult = nonExactKeywordOp.isSuccessful() ? nonExactKeywordOp.isSuccessful() : nonExactKeywordOp.getErrors();

        // Checking for and labeling duplicate keywords
        var nonExactKwObject = nonExactKeywordOp.getResult();
        sameMt_duplFound = this.markDuplicateKeywords(nonExactKw, adGroup.getName());
        if(sameMt_duplFound === 1) nonExactKwObject.applyLabel(this.getLabel(DUPLICATE_KW_LABELS.sameMatchtype_new));
      }


      // Logging keyword operation errors
      var exactErrorRow, nonExactErrorRow;

      if(exactKeywordOp && exactKeywordOp.getErrors().length > 0) {
        exactErrorRow = [TIME_STAMP, "Kw" , "Disapproved", exactKeywordOp.getErrors(), this.campaignName, this.adGroupObjects[i].adGroup ,"", targetBid,"","","","","","","","","","","","","","",""];
        ERROR_LOG.push(exactErrorRow);

        if(exactKeywordOp.getErrors().toString().indexOf("POLICY") != -1) adGroup.applyLabel(POLICY_ERROR_LABELS.keyword);
      }
      if(nonExactKeywordOp && nonExactKeywordOp.getErrors().length > 0) {
        nonExactErrorRow = [TIME_STAMP, "Kw" , "Disapproved", nonExactKeywordOp.getErrors(), this.campaignName, this.adGroupObjects[i].adGroup ,"", nonExactBid,"","","","","","","","","","","","","","",""];
        ERROR_LOG.push(nonExactErrorRow);

        if(nonExactKeywordOp.getErrors().toString().indexOf("POLICY") != -1) adGroup.applyLabel(POLICY_ERROR_LABELS.keyword);
      }
      if(DEBUG_MODE == 1) Logger.log("Keywords created for " + this.adGroupObjects[i].adGroup + " in matchtypes exact, exactReverse, nonExact: " + exactKeywordResult + ", " + exactKeywordReverseResult + ", " + nonExactKeywordResult);

    } catch(e) {
      Logger.log("Keyword Creation Exception: The operation for adGroup " + this.adGroupObjects[i].adGroup + " showed an error. Continuing..."); Logger.log("Specific error : " + e + " Again, no worries if adgroup doesn't exist yet."); Logger.log(" ");
      ERROR_SUMMARY_OBJECT.keywordErrorCount += 3;
      continue;
    }

    // SQA Extra AdGroup Label for match accuracy
    if(INPUT_SOURCE_MODE === "SQA"){
    	this._sqaSetMatchAccuracyLabel(adGroup, this.adGroupObjects[i]);
    }
  } // END FOR Loop adgroups
};


/**
* @param array bidRange
* @param number minProductPrice
* @param number conservativeFactor
* @return number constrainedBid
*/
KeywordHandler.prototype.calculateRelativeBid = function(bidRange, minProductPrice, conservativeFactor){
  var prelimBid = Math.round(Math.log(minProductPrice)/conservativeFactor * 100) / 100;
  var constrainedBid;

  if(prelimBid < bidRange[0]) {
    constrainedBid = bidRange[0];
  } else if(prelimBid > bidRange[1]) {
    constrainedBid = bidRange[1];
  } else constrainedBid = prelimBid;
  return constrainedBid;
};


/**
* @param {string} keyword
* @return {bool} duplicatesFound
*/
KeywordHandler.prototype.markDuplicateKeywords = function(keyword, adGroupName) {

  var sameMt_Legacy_Label = this.getLabel(DUPLICATE_KW_LABELS.sameMatchtype_legacy);
  var duplicatesFound = 0;

  try {
    var kwIterator = AdsApp.keywords().withCondition('Text STARTS_WITH_IGNORE_CASE \"' + keyword + '\"')
      .withCondition('AdGroupName != \"' + adGroupName + '\"')
      .withCondition("AdGroupStatus != REMOVED").withCondition("Status != REMOVED").withCondition("CampaignStatus != REMOVED")
      .get();

    if(kwIterator.totalNumEntities() > 0) {
      while (kwIterator.hasNext()) {
        var duplKeyword = kwIterator.next();
        var duplKeywordText = duplKeyword.getText().toLowerCase();

        if(duplKeywordText === keyword.toLowerCase()) {
          Logger.log("sameMt Duplicate found and labeled for keyword '" + keyword + "'");
          duplKeyword.applyLabel(sameMt_Legacy_Label);
          duplicatesFound = 1;
        }
      } // END while keyword
    }
  } catch (e) {Logger.log(e + " . " + e.stack);}

  return duplicatesFound;
};



/**
* @param string type
* @return string labelName
*/
KeywordHandler.prototype.getLabel = function(type) {
  var labelName = type;
  try {
    var existingLabel = AdsApp.labels().withCondition('Name = "' + labelName + '"').get().next();
  } catch (e) {
    var newLabel = AdsApp.createLabel(labelName);
  }
  return labelName;
};

/*
* @return int adErrorCount
*/
KeywordHandler.prototype.getKeywordErrorCount = function() {
  return this.keywordErrorCount;
};


/**
* @param {object} adGroup, the Google ads entity
* @param {object} adGroupObject, the feed object containing necessary data
* @return {void}
*/
KeywordHandler.prototype._sqaSetMatchAccuracyLabel = function(adGroup, adGroupObject) {
	// Execute only if matchaccuracy is a number
	if (isNaN(adGroupObject.matchAccuracy) === false && adGroupObject.matchAccuracy != null) {
		var labelAssignedToAdgroup = true;

		var entityMatchLabel = typeof adGroupObject.matchAccuracy !== "undefined" ? "nrSQA_" + adGroupObject.matchAccuracy + "_matchValue" : "";
		try{
			var labelIterator = adGroup.labels().withCondition('Name = "' + entityMatchLabel + '"').get().next();
		} catch (e) {labelAssignedToAdgroup = false;}

		if (DEBUG_MODE === 1) Logger.log("entityMatchLabel :" + entityMatchLabel);
		if (entityMatchLabel.length > 0 && entityMatchLabel !== "undefined" && labelAssignedToAdgroup === false) this.getLabel(entityMatchLabel);
		adGroup.applyLabel(entityMatchLabel);
	}
}



KeywordHandler.prototype.pauseNonServingKeywords = function() {

  if(typeof PAUSE_NONSERVING_ELEMENTS == "undefined") return;
  if(PAUSE_NONSERVING_ELEMENTS === false) return;

  var lowVolLabel = this.getLabel("Paused_by_nrFeedCamps_KW_LowVolume");
  var lowVolLabel_AG = this.getLabel("Paused_by_nrFeedCamps_AG_LowVolume");

  var adGroupIterator = AdsApp.adGroups()
    .withCondition("Status = ENABLED")
    .withCondition("LabelNames CONTAINS_NONE ['" + lowVolLabel_AG + "'] ")
    .withCondition('CampaignName CONTAINS_IGNORE_CASE "'  + this.campaignName + '"')
    .withCondition("CampaignStatus = ENABLED")
    .get();

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();
    var keywordIterator_zeroVol = adGroup.keywords()
      .withCondition("Status = ENABLED")
      .withCondition("SystemServingStatus = 'RARELY_SERVED'")
      .withCondition("Impressions = 0").withCondition("Conversions = 0").forDateRange("LAST_30_DAYS")
      .get();

    var keywordIterator_hasActiveKws = adGroup.keywords().withCondition("Status = ENABLED").get();

    if(keywordIterator_hasActiveKws.totalNumEntities() > 0) {
      while (keywordIterator_zeroVol.hasNext()) {
        var keyword = keywordIterator_zeroVol.next();
        keyword.pause();
        keyword.applyLabel(lowVolLabel);
      }
    }
  } // END WHILE Loop AdGroup
};


/*
* @return void
*/
KeywordHandler.prototype.pauseNonPerformingKeywords_lowCtr = function() {

  var modeLabel = this.getLabel("Paused_by_nrFeedCamps_KW_lowCtr");
  Logger.log("Starting to pause non-performing Keywords with low CTR: minCTR 0.35%");

  var adGroupIterator = AdsApp.adGroups()
    .withCondition("Status = ENABLED")
    .withCondition("Impressions >= 300")
    .withCondition("Ctr <= 0.0035")
    .withCondition("Conversions = 0")
    .forDateRange("LAST_30_DAYS")
    .withCondition("CampaignName CONTAINS_IGNORE_CASE '"  + this.campaignName + "'")
    .withCondition('CampaignStatus != REMOVED')
    .get();

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();
    var keywordIterator_nonPerf = adGroup.keywords()
      .withCondition("Status = ENABLED")
      .withCondition("Impressions >= 300")
      .withCondition("Ctr <= 0.0035")
      .withCondition("Conversions = 0")
      .forDateRange("LAST_30_DAYS")
      .get();

    if(keywordIterator_nonPerf.totalNumEntities() > 0) {
      while (keywordIterator_nonPerf.hasNext()) {
        var keyword = keywordIterator_nonPerf.next();
        keyword.pause();
        keyword.applyLabel(modeLabel);
      }
    }
  } // END WHILE Loop AdGroup
};


/*
* @return void
* @throws {exception} PauseNonPerformingKeywords_HighCost_Exception
*/
KeywordHandler.prototype.pauseNonPerformingKeywords_highCost = function() {

  var modeLabel = this.getLabel("Paused_by_nrFeedCamps_KW_highCost");
  var maxCostValue = typeof NEW_KEYWORD_CONFIG.AutoPause_MaxCost === "undefined" ? 100 : NEW_KEYWORD_CONFIG.AutoPause_MaxCost;
  Logger.log("Starting to pause non-performing Keywords with highCost: maxCostValue > " + maxCostValue);

  var dateRange = typeof NEW_KEYWORD_CONFIG.AutoPause_LookBack_DateRange !== "undefined" ? NEW_KEYWORD_CONFIG.AutoPause_LookBack_DateRange : "LAST_30_DAYS";

  try {
  	var adGroupIterator = AdsApp.adGroups()
    .withCondition("Status = ENABLED")
    .withCondition("Cost >=" + maxCostValue)
    .withCondition("Conversions = 0")
    .forDateRange(dateRange)
    .withCondition('CampaignName CONTAINS_IGNORE_CASE "'  + this.campaignName + '"')
    .withCondition('CampaignStatus != REMOVED')
    .get();

	  while (adGroupIterator.hasNext()) {
	    var adGroup = adGroupIterator.next();
	    var keywordIterator_nonPerf = adGroup.keywords()
	      .withCondition("Status = ENABLED")
	      .withCondition("Cost >=" + maxCostValue)
	      .withCondition("Conversions = 0")
	      .forDateRange(dateRange)
	      .get();

	    if(keywordIterator_nonPerf.totalNumEntities() > 0) {
	      while (keywordIterator_nonPerf.hasNext()) {
	        var keyword = keywordIterator_nonPerf.next();
	        keyword.pause();
	        keyword.applyLabel(modeLabel);
	      }
	    }
	  } // END WHILE Loop AdGroup
  } catch(e){Logger.log("PauseNonPerformingKeywords_HighCost_Exception: " + e + ". stack : " + e.stack);}
};


/*
* @description generate close variant keywords via Suggest
* @return void
*/
KeywordHandler.prototype.addCloseSuggestVariants = function() {

  if(typeof NEW_KEYWORD_CONFIG.addCloseVariants === "undefined") return;
  if(NEW_KEYWORD_CONFIG.addCloseVariants === false) return;

  var suggestLabel = this.getLabel("Extended_by_nrFeedCamps_KW-Suggest");
  Logger.log("Starting to add close exact keywords variants via Google Suggest");

  var adGroupIterator = AdsApp.adGroups()
    .withCondition("Status = ENABLED")
    .withCondition("LabelNames CONTAINS_NONE ['" + suggestLabel + "'] ")
    .withCondition('CampaignName CONTAINS_IGNORE_CASE "'  + this.campaignName + '"')
    .withCondition('CampaignStatus != REMOVED')
    .get();

  while (adGroupIterator.hasNext()) {
    var adGroup = adGroupIterator.next();
    var keywordIterator = adGroup.keywords()
      .withCondition("Status = ENABLED")
      .withCondition("KeywordMatchType = EXACT")
      .get();

    if(keywordIterator.totalNumEntities() > 0) {
      while (keywordIterator.hasNext()) {
        var keyword = keywordIterator.next();
        var keyword_WithPluses = keyword.getText().replace(/\+/g,"").replace(/ /g,"+").toLowerCase();
        var keywordBid = keyword.bidding.getCpc();
        var requestUrl = "https://suggestqueries.google.com/complete/search?output=chrome&hl=de&q=" + keyword_WithPluses;
        var response = JSON.parse(UrlFetchApp.fetch(requestUrl));

        if(typeof response[1][0] != "undefined") {
          for(var j=0;j<3;j++) {
            if(j === 0 || response[4]["google:suggestrelevance"][j-1] - response[4]["google:suggestrelevance"][j] < 10) {

              var levenshteinDist = this.calculateLetterChanges(response[0].toLowerCase(), response[1][j]);
              var simMetric = (1-levenshteinDist/response[1][j].length).toFixed(2);

              // If new keyword similar enough
              if(simMetric > 0.84 && levenshteinDist < 2) {
                var suggestKeyword = "[" + response[1][j] + "]";
                var suggestKeywordIterator = AdsApp.keywords()
                  .withCondition("CampaignName CONTAINS_IGNORE_CASE '"  + this.campaignName + "'")
                  .withCondition("Status = ENABLED")
                  .withCondition('Text = "'+ suggestKeyword + '"')
                  .get();

                if(keywordIterator.totalNumEntities() === 0){
                  var keywordBuilder = adGroup.newKeywordBuilder();
                  keywordBuilder.withText(suggestKeyword).withCpc(keywordBid).build();
                }
              }
            }
          } // END FOR loop responses
        } // END IF response undefined
      } // END WHILE Loop Keyword
    }
  } // END WHILE Loop AdGroup
};



/*
* @param {string} a, the reference string
* @param {string} b, the new string to be compared against the reference string
* @return {int} res, the number of necessary letter changes
*/
KeywordHandler.prototype.calculateLetterChanges = function(a, b){
  var tmp;
  if (a.length === 0) { return b.length; }
  if (b.length === 0) { return a.length; }
  if (a.length > b.length) { tmp = a; a = b; b = tmp; }

  var i, j, res, alen = a.length, blen = b.length, row = Array(alen);
  for (i = 0; i <= alen; i++) { row[i] = i; }

  for (i = 1; i <= blen; i++) {
    res = i;
    for (j = 1; j <= alen; j++) {
      tmp = row[j - 1];
      row[j - 1] = res;
      res = b[i - 1] === a[j - 1] ? tmp : Math.min(tmp + 1, Math.min(res + 1, row[j] + 1));
    }
  }
  return res;
};




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 4.1 NegativeKeywordHandler: adds negative keywords on adGroup level by aggregation type
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/**
 * Constructor for the negative Keyword Handler
 * @param {String} campaignName
 * @param {Object} adGroupObjects
 */
function NegativeKeywordHandler(campaignName, adGroupObjects) {
  this.campaign = campaignName;

  if(typeof adGroupObjects != "undefined") this.adGroupObjects = adGroupObjects;

  else{ throw "Exception: AdGroupObjects must be an array."; }

  if(!this.adGroupObjects.constructor === Array){
    throw "Exception: AdGroupObjects must be an array.";
  }
  Logger.log("Creating negatives for " + this.adGroupObjects.length + " adGroups.");
  this._addKeywordProperty();
}


/**
 * Helper function: Adds a new property negative keyword to all adgroup objects (private helper method)
 * @return {void}
 */
NegativeKeywordHandler.prototype._addKeywordProperty = function() {
  for (var i = 0; i < this.adGroupObjects.length; i++) {
    this.adGroupObjects[i]["negativeKeywords"] = (function(aggregationType, gender, brand, category, keyword, adGroup) {

      var negativeKeywords = [];
      if (aggregationType === "BC") {
        if (gender !== "" && gender.length > 0) {
          negativeKeywords = gender.split(",");
          return negativeKeywords;
        }

      } else if (aggregationType === "BG" || aggregationType === "BM") {
        if (category !== "" && category.length > 0) {
          var catArray = category.split(",");
          for(var j=0; j < catArray.length;j++) {
          	if(keyword.indexOf(catArray[j]) == -1) negativeKeywords.push('"' + catArray[j] + '"');
          }
          return negativeKeywords;
        }

      } else if (aggregationType === "CG" ) {
        if (brand !== "" && brand.length > 0) {
          var brandArray = brand.split(",");
          for(var j=0; j < brandArray.length;j++) {
            negativeKeywords.push('"' + brandArray[j] + '"');
          }
          return negativeKeywords;
        }

      } else if (aggregationType === "C" ) {
        if (brand !== "" && brand.length > 0 && gender !== "" && gender.length > 0) {

          var brandArray = brand.split(",");
          for(var j=0; j < brandArray.length;j++) {
            negativeKeywords.push('"' + brandArray[j] + '"');
          }

          var genderArray = gender.split(",");
          for(var j=0; j < genderArray.length;j++) {
            negativeKeywords.push('"' + genderArray[j] + '"');
          }
          return negativeKeywords;
        }
      } else if (aggregationType === "B") {
        if (category !== "" && category.length > 0 && gender !== "" && gender.length > 0) {

          var catArray = category.split(",");
          for(var j=0; j < catArray.length;j++) {
            negativeKeywords.push('"' + catArray[j] + '"');
          }

          var genderArray = gender.split(",");
          for(var j=0; j < genderArray.length;j++) {
            negativeKeywords.push('"' + genderArray[j] + '"');
          }

          return negativeKeywords;
        }
      } // END IF B

    })(this.adGroupObjects[i].aggregationType, this.adGroupObjects[i].gender, this.adGroupObjects[i].brand, this.adGroupObjects[i].category, this.adGroupObjects[i].kwWithUnderscore, this.adGroupObjects[i]);
  }
};


/**
 * Public function: Adds negative keywords to all adgroups provided inside the adGroups property.
 * @return {void}
 * @throws {exception}
 */
NegativeKeywordHandler.prototype.addNegativeKeywordsPerAdGroup = function() {

  try{
    for (var i = 0; i < this.adGroupObjects.length; i++) {
      this._addNegativeKeywords(this.adGroupObjects[i]);
    }
  } catch(e){ Logger.log("AdGroupObjectIterationException for adding negative keywords."); Logger.log("Specific error : " + e + ". Stacktrace : " + e.stack); Logger.log(" ");}

};

/**
 * Helper function: Adds negative keywords to one provided adGroup (private helper method)
 * @param {Object} adGroupObject
 * @return {void}
 */
NegativeKeywordHandler.prototype._addNegativeKeywords = function(adGroupObject) {
  var adsApp_adGroup = AdsApp.adGroups()
    .withCondition('CampaignName = "' + this.campaign + '"')
    .withCondition('CampaignStatus != REMOVED')
    .withCondition('Name = \"' + adGroupObject.adGroup + '\"')
    .get().next();

  if (adGroupObject.negativeKeywords) {
    if(DEBUG_MODE == 1) {Logger.log("Adding %s negative keyword(s) to adgroup %s", adGroupObject.negativeKeywords.length, adGroupObject.adGroup);}
    for (var i = 0; i < adGroupObject.negativeKeywords.length; i++) {
      adsApp_adGroup.createNegativeKeyword(adGroupObject.negativeKeywords[i]);
      if(DEBUG_MODE == 1) {Logger.log("Adding negative keyword %s", adGroupObject.negativeKeywords[i]);}
    }
  }

  // Create matchtype split campaigns and set exact keyword as negative
  if(NEW_CAMPAIGN_CONFIG.splitByMatchType == 1 && NEW_CAMPAIGN_CONFIG.allowedMatchTypes == "nonExact"){
    var exactKw = '[' + adGroupObject.kwWithUnderscore.split("_").join(" ").replace(/\//g,' ') + ']';
    var reverseExactKw = '[' + adGroupObject.kwWithUnderscore.split("_").reverse().join(" ").replace(/\//g,' ') + ']';

    // NO error logging due to missing operation object in API
    var negativeKwOperation = adsApp_adGroup.createNegativeKeyword(exactKw);
    var negativeReverseKwOp = adsApp_adGroup.createNegativeKeyword(reverseExactKw);
  }
};


/**
 * Helper function: Handles occuring errors through the ErrorLogger Interface
 * @param  {Object} message
 * @return {void}
 */
NegativeKeywordHandler.prototype._logError = function(message) {
  var errorRow = [TIME_STAMP, "NegativeKw", message.errorType, message.reason, message.campaign, message.adGroup, "", "", "", "", "", "", "", "", "", "", "", "", "", "","",""];
  if (typeof ERROR_LOG != "undefined") {
    ERROR_LOG.push(errorRow);
  } else Logger.log(errorRow);
};


/*
* @return {void}
*/
NegativeKeywordHandler.prototype.addNegativeKeywordToQuerySource = function() {

  for(var i=0; i<this.adGroupObjects.length;i++){

    if(typeof this.adGroupObjects.querySource == "undefined") continue;
    var querySource = this.adGroupObjects.querySource;
    if(typeof NEW_PAID_QUERY_CONFIG != "undefined"){
      if(NEW_PAID_QUERY_CONFIG.setNegative_In_QuerySource === 1) {

        var exactKw = "[" + this.adGroupObjects.headline + "]";

        // 0. Continue if source is shopping campaign
        if(typeof STRUCTURE_IDENTIFIER != "undefined"){
          if(this.adGroupObjects.querySource.campaign.indexOf(STRUCTURE_IDENTIFIER.shopping.campaignIdentifier) != -1) continue;
        }

        // case 1: campaign level
        if(NEW_PAID_QUERY_CONFIG.setNegative_Level === "campaign"){
          var adsApp_campaign = AdsApp.campaigns()
            .withCondition('Name = "' + this.campaign + '"')
            .withCondition('Status != REMOVED')
            .get().next();
          var negativeKwOperation_AdGroup = adsApp_campaign.createNegativeKeyword(exactKw);
        }

        // case 2: adgroup level
        if(NEW_PAID_QUERY_CONFIG.setNegative_Level === "adgroup"){
          var adsApp_adGroup = AdsApp.adGroups()
            .withCondition('CampaignName = "' + querySource.campaign + '"')
            .withCondition('CampaignStatus != REMOVED')
            .withCondition('Name = \"' + querySource.adgroup + '\"')
            .get().next();
          var negativeKwOperation_Campaign = adsApp_adGroup.createNegativeKeyword(exactKw);
        }
      }
    }
  } // END FOR loop adGroupObjects
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 8. SnippetHandler: adds snippets
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function SnippetHandler(campaignName) {
  this.campaignName = campaignName;
}

/*
 * @param {object} adGroupObjects
 * @return {void}
 * @throws {exception} SnippetCreationException
 */
SnippetHandler.prototype.addSnippets = function(adGroupObjects) {
  this.adGroupObjects = adGroupObjects;

  Logger.log("Creating 3 snippets (brand, cat, gender) or n custom for " + this.adGroupObjects.length + " adGroups. ");
  try{
    for(var i=0; i<this.adGroupObjects.length; i++) {
      var adgroupName = this.adGroupObjects[i].adGroup;
      var adGroup = AdsApp.adGroups().withCondition('CampaignName = "'  + this.campaignName + '"').withCondition('Name = \"'  + adgroupName.replace('"','\"') + '\"').withCondition('Status != REMOVED').get().next();

      var snippetBuilder = AdsApp.extensions().newSnippetBuilder();

      var brands = this.adGroupObjects[i].brand.split(",").slice(0,10);
      var categories = this.adGroupObjects[i].category.split(",").slice(0,10);
      var genders = this.adGroupObjects[i].gender.split(",");

      // List of eligible values: https://support.google.com/adwords/answer/6280012?hl=de
      if(brands.length>2) this.createSingleSnippet(brands, snippetBuilder, adGroup, "Marken");
      if(categories.length>2) this.createSingleSnippet(categories, snippetBuilder, adGroup, "Stile");
      if(genders.length>2) this.createSingleSnippet(genders, snippetBuilder, adGroup, "Modelle");

      /*if(typeof SNIPPET_BUILDER_CONFIG !== "undefined"){
        if(typeof SNIPPET_BUILDER_CONFIG.snippetHeader_custom !== "undefined"){}
        for(prop in SNIPPET_BUILDER_CONFIG.snippetHeader_custom) {}
      }*/

    } // END FOR Adgroups
  } catch(e){Logger.log("SnippetCreationException : " + e + " . stack : " + e.stack);}
};


/*
* @param {array} list
* @param {object} snippetBuilder
* @param {object} adGroup
* @param {string} defaultHeader
* @return {void}
*/
SnippetHandler.prototype.createSingleSnippet = function(list, snippetBuilder, adGroup, defaultHeader) {

  var snippetHeader;
  var configKey = "header_" + defaultHeader;
  if(typeof SNIPPET_BUILDER_CONFIG == "undefined") snippetHeader = defaultHeader;
  if(typeof SNIPPET_BUILDER_CONFIG != "undefined") snippetHeader = SNIPPET_BUILDER_CONFIG[configKey];

  var newSnippet= snippetBuilder.withHeader(snippetHeader).withValues(list).build().getResult();

  var snippetOperation = adGroup.addSnippet(newSnippet);
  if(snippetOperation.getErrors()){
    var errorRow = [TIME_STAMP, "Snippet", "Disapproved", snippetOperation.getErrors(), this.campaignName, adGroup.getName(), "", "", "", "", "", "", "", "", "", "", "", "", "", "","",""];
    ERROR_LOG.push(errorRow);
  }
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 5. SitelinkHandler: adds sitelinks, sets end date
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function SitelinkHandler(campaignName) {

  this.campaignName = campaignName;
  this.dateYmd = new Date().toISOString().substring(0, 10);

  ///////
  /////// 5.1 SitelinkBuilder
  ///////
  /* STORY: On single adgroup level,
  * 1. Determine the current number of sitelinks per sitelinkType and the expected number via iterative lookup through builder algorithms and
  * 2. Create adgroup sitelinks as needed. NOT IMPLEMENTED ! >> this.campaignSitelinkBuilder = function() {}
  */
  ///////


  /*
  * @param array adGroupObjects
  * @param object storageHandler
  * @return void
  * @throws exception MissingNewEntityException
  */
  this.createAdGroupSitelinks = function(adGroupObjects, storageHandler) {

    this.adGroupObjects = adGroupObjects;

    Logger.log("Creating 4-5 adgroup sitelinks for " + this.adGroupObjects.length + " adGroups.");

    for(var i=0; i < this.adGroupObjects.length; i++) {

      var adGroupObject = this.adGroupObjects[i];
      if(DEBUG_MODE == 1){Logger.log(" "); Logger.log("****"); Logger.log("Initiating adgroup sitelink iteration for adGroup: " + this.adGroupObjects[i].adGroup);}

      if(this.checkIfCampaignLimitReached === true) return;

      // Find specific ADGROUP of adgroup object via iterator
      try {
        var adGroupIterator = AdsApp.adGroups()
        .withCondition('CampaignName = "' + this.campaignName + '"')
        .withCondition('CampaignStatus != REMOVED')
        .withCondition('AdGroupName CONTAINS_IGNORE_CASE \"' + adGroupObject.adGroup  + '\"')
        .withCondition("Status = ENABLED")
        .get();

        while (adGroupIterator.hasNext()) {
          var adgroup = adGroupIterator.next();
          var adGroupSitelinkIterator = adgroup.extensions().sitelinks().get();
          var newSitelinks = SITELINK_BUILDER_CONFIG.maxAddedAdGroupSitelinks - adGroupSitelinkIterator.totalNumEntities();
          // Early exit if no sitelinks to be added.
          if (newSitelinks < 1) {
            Logger.log("AdGroup" + adgroup.getName() + "contains min "  + SITELINK_BUILDER_CONFIG.maxAmountAdGroupSitelinks + ", thus a sufficient amount. Moving on to next adGroup...");Logger.log(" ");
            continue;
          }

          // START specific sitelink creation iterators here
          var logLengthBefore = SITELINK_CREATION_LOG.length;
          var newSLsAfter1stRound = this.createBySingleValue(adgroup, adGroupObject, newSitelinks);
          var newSLsAfter2ndRound = this.createByClicks(adGroupObject, newSLsAfter1stRound);
          // this.createBySaleCombination(adGroupObject, newSLsAfter2ndRound);

          // add fallback or evergreen sitelinks if min of 4 is not reached
          var logLengthDelta = SITELINK_CREATION_LOG.length - logLengthBefore;

          if(logLengthDelta < 4){
            var missingSitelinks = 4 - logLengthDelta;
            for (var j=0; j < missingSitelinks; j++) {
              var fallbackSitelink = SITELINK_BUILDER_CONFIG.sitelinkFallbacks[j];
              this.createFallbackSitelink(adgroup, adGroupObject, fallbackSitelink);
            }
          }
        } // END WHILE LOOP
      } catch(e) { Logger.log("Adgroup fetch or sitelink operation on " + adGroupObject.adGroup + " not successful."); Logger.log("Error message : " + e.message + ". Stacktrace : " + e.stack);}
    } // END FOR LOOP Adgroup objects

    if(SITELINK_CREATION_LOG.length > 0 && SCRIPT_RUN_SCOPE.productionMode_writeToDB === "YES") {
      storageHandler.writeRowstoStorage(SITELINK_CREATION_LOG, "adGroup_sitelinks");
    }
    SITELINK_CREATION_LOG = []; // Empty sitelink creation log.
  };


  /*
  * @return {bool} limitReached
  * @throws {exception} SitelinkMaxLimitPerCampaignException
  * @throws {exception} CampaignFetchFailedException
  */
  this.checkIfCampaignLimitReached = function (){

    var limitReached = false;
    var campaignSelector = AdsApp.campaigns().withCondition('Name CONTAINS_IGNORE_CASE "' + this.campaignName + '"').withCondition('CampaignStatus != REMOVED').get();

    try{
      while (campaignIterator.hasNext()) {
        var campaign = campaignIterator.next();
        var campaignSitelinkSelector = campaign.extensions().sitelinks().get();

        if (campaignSitelinkIterator.totalNumEntities() == 10000) {
          limitReached = true;
          Logger.log("SitelinkMaxLimitPerCampaignException: Please split campaign or delete sitelinks.");
        }
      }
    } catch(e){Logger.log("CampaignFetchFailedException: the specified campaign could not be fetched" + e + "." + e.stack);}

    return limitReached;
  };


  ///////
  /////// 5.1.1 createSitelinksBySingleValue
  ///////

  /*
  * @param object adgroup,
  * @param object adGroupObject
  * @param int maxNewSitelinks
  * @return int remainingSitelinks
  * @throws exception
  */
  this.createBySingleValue = function(adgroup, adGroupObject, maxNewSitelinks){

    var siteLinkTextBuilderConfig = SITELINK_BUILDER_CONFIG;

    var bcgGender = (adGroupObject.brand.length + adGroupObject.category.length > 19 && adGroupObject.gender.split(",").length == 1) ?
      adGroupObject.gender.replace("Damen","D.").replace("Herren","H.").replace("Kinder","K.") : adGroupObject.gender;
    var bcgAffix = adGroupObject.brand.length + adGroupObject.category.length + adGroupObject.gender.length < 24 ? "© " : " ";

    var bgAffixLong = "© " + SITELINK_BUILDER_CONFIG.textFillWords.for_value + " ";
    var bgAffix = adGroupObject.brand.length < 13 ? bgAffixLong : " ";

    var bcAffixLong = " " + SITELINK_BUILDER_CONFIG.textFillWords.by_value + " ";
    var bcAffix = adGroupObject.brand.length + adGroupObject.category.length < 21 ? bcAffixLong : " ";
    var bcSuffix = adGroupObject.brand.length + adGroupObject.category.length < 20 ? "© " : "";

    var cgAffixLong = " " + SITELINK_BUILDER_CONFIG.textFillWords.for_value + " ";
    var cgAffix = adGroupObject.category.length < 21 ? cgAffixLong : "";

    var useCgDiscountSuffix = function(adGroupObject){
      var suffix;
      if(adGroupObject.gender.length + adGroupObject.category.length < 12 && adGroupObject.discount > 19 && siteLinkTextBuilderConfig.useDiscountPercentageInText == "YES"){
        suffix = " " + SITELINK_BUILDER_CONFIG.textFillWords.upto_value + " -" + adGroupObject.discount + "%";
      } else { suffix = "";}
      return suffix;
    };
    var cgSuffix = useCgDiscountSuffix(adGroupObject);

    var usebSuffix = function(adGroupObject){
      var bSuffix;
      if(adGroupObject.brand.length < 16 && adGroupObject.discount > 19 && siteLinkTextBuilderConfig.useDiscountPercentageInText == "YES"){
        bSuffix = "© " + SITELINK_BUILDER_CONFIG.textFillWords.upto_value + " -" + adGroupObject.discount + "%";
      } else {bSuffix = "© " + SITELINK_BUILDER_CONFIG.textFillWords.shop_value ;}
      return bSuffix;
    };
    var bSuffix = usebSuffix(adGroupObject);

    var usediscountUrlSuffix = function(bSuffix,siteLinkTextBuilderConfig) {
      var urlSuffix;
      if(siteLinkTextBuilderConfig.useDiscountPercentageInText == "YES" && bSuffix.indexOf("%")){
        urlSuffix = " " + siteLinkTextBuilderConfig.discountSalePhrase;
      } else urlSuffix = "";
      return urlSuffix;
    };
    var discountUrlSuffix = usediscountUrlSuffix(bSuffix,siteLinkTextBuilderConfig);

    siteLinkTextBuilderConfig.textBuilder = {
      BCG : {  textSchema : adGroupObject.brand + bcgAffix + bcgGender + " " +adGroupObject.category }, // BCG > Nike Laufschuhe Damen
      BG : { textSchema : adGroupObject.brand + bgAffix + adGroupObject.gender}, // BG > Damen Nike
      BC : { textSchema : adGroupObject.category + bcAffix + adGroupObject.brand + bcSuffix}, //BC > Nike Laufschuhe
      CG : { textSchema : adGroupObject.category + cgAffix + adGroupObject.gender + cgSuffix }, // CG > Laufschuhe,
      B : { textSchema : adGroupObject.brand + bSuffix } // B > Nike
    };

    // Extending textBuilder config object with URL schemata, no configurability planned
    siteLinkTextBuilderConfig.textBuilder.BCG.urlSchema = adGroupObject.brand + " " + adGroupObject.category + " " + adGroupObject.gender;
    siteLinkTextBuilderConfig.textBuilder.BG.urlSchema = adGroupObject.brand + " " + adGroupObject.gender;
    siteLinkTextBuilderConfig.textBuilder.BC.urlSchema = adGroupObject.brand + " " + adGroupObject.category;
    siteLinkTextBuilderConfig.textBuilder.CG.urlSchema = adGroupObject.category + " " + adGroupObject.gender + discountUrlSuffix;
    siteLinkTextBuilderConfig.textBuilder.B.urlSchema = adGroupObject.brand + discountUrlSuffix;

    var listBySingleValueObjects = [];
    var aggrType = adGroupObject.aggrega
tionType;
    var aggregationTypeArray = ["BM", "BCG", "BG", "BC", "CG", "B"];

    // removing empty values from textBuilder
    if(adGroupObject.brand.length === 0) {
      siteLinkTextBuilderConfig.textBuilder.BCG = undefined;
      siteLinkTextBuilderConfig.textBuilder.BG = undefined;
      siteLinkTextBuilderConfig.textBuilder.BC = undefined;
      siteLinkTextBuilderConfig.textBuilder.B = undefined;
    }
    if(adGroupObject.category.length === 0) {
      siteLinkTextBuilderConfig.textBuilder.BCG = undefined;
      siteLinkTextBuilderConfig.textBuilder.BC = undefined;
      siteLinkTextBuilderConfig.textBuilder.CG = undefined;
    }
    if(adGroupObject.gender.length === 0) {
      siteLinkTextBuilderConfig.textBuilder.BG = undefined;
      siteLinkTextBuilderConfig.textBuilder.CG = undefined;
    }

    // removing Brand type from textBuilder, if not in config array
    if(SITELINK_BUILDER_CONFIG.sitelinkTypes.indexOf("B") == -1) siteLinkTextBuilderConfig.textBuilder.B = undefined;
    if(SITELINK_BUILDER_CONFIG.sitelinkTypes.indexOf("CG") == -1) siteLinkTextBuilderConfig.textBuilder.CG = undefined;

    var ownremovedAggrTypeArray = aggregationTypeArray;

    try{
      ownremovedAggrTypeArray.splice(ownremovedAggrTypeArray.indexOf(aggrType),1); // Remove own entry from aggregationTypeArray
    } catch(e) {
      Logger.log("MissingAggregationTypeException: Type" + aggrType + "not in aggregationTypeArray"); Logger.log("Specific error : " + e);
      Logger.log("Error message " + e.message + ". Stacktrace : " + e.stack);
    }

    for(var j=0; j < ownremovedAggrTypeArray.length; j++){
      if(DEBUG_MODE == 1) {Logger.log(" "); Logger.log("Building sitelink list for adGroup " + adGroupObject.adGroup + " (" + aggrType + ") with Type " + ownremovedAggrTypeArray[j]);}

      // CASE 1: BCG
      if(aggrType == "BCG"){ // Nike Laufschuhe Damen

        var ownremovedConfig = siteLinkTextBuilderConfig.textBuilder;
        if(ownremovedAggrTypeArray[j] == "BM") continue; // Skip BM as giving soruce as it contains no schema

        // Make sure "B" is only added once
        if(ownremovedConfig["B"]){
          listBySingleValueObjects.push({
            siteLinkText : ownremovedConfig["B"].textSchema.substring(25,0),
            siteLinkUrl : ownremovedConfig["B"].urlSchema
          });
        }

        for(var prop in ownremovedConfig) {
          if(typeof ownremovedConfig[prop] == "undefined") continue;  // Skip if undefined
          if(aggrType == prop || prop == "B") {continue;}

          if(siteLinkTextBuilderConfig.skipIfTextTooLong == "YES" && ownremovedConfig[prop].textSchema.length > 25){continue;}

          try{
            // Prevent duplicate entries
            var skipEntry = false;
            for(var i=0; i<listBySingleValueObjects.length; i++) {
              if(listBySingleValueObjects[i].siteLinkText == ownremovedConfig[prop].textSchema.substring(25,0)) skipEntry = true;
            }
            if(skipEntry === true) continue;

            listBySingleValueObjects.push({
              siteLinkText : ownremovedConfig[prop].textSchema.substring(25,0),
              siteLinkUrl : ownremovedConfig[prop].urlSchema
            });
          } catch(e){ continue;}
        } // END FOR IN LOOP
      }

      // CASE 2: BC or BM or B
      if(aggrType == "BC" || aggrType == "BM" || aggrType == "B"){

        var genderArray = adGroupObject.gender.split(",");
        var categoryArray = adGroupObject.category.split(",").slice(0,2);
        var ownremovedConfig = siteLinkTextBuilderConfig.textBuilder;
        if(ownremovedAggrTypeArray[j] == "BM") {continue;} // Skip BM as giving soruce as it contains no schema

        // Make sure "B" is only added once
        if(ownremovedConfig["B"]){
          listBySingleValueObjects.push({
            siteLinkText : ownremovedConfig["B"].textSchema.substring(25,0),
            siteLinkUrl : ownremovedConfig["B"].urlSchema
          });
        }

        if(genderArray.length > 0 && categoryArray.length == 1) {
          for (var k=0; k <genderArray.length; k++) {
            if(genderArray[k].length === 0) continue;

            for(var prop in ownremovedConfig) {

              try{
                if(prop == aggrType || prop == "B"){continue;}
                if(typeof ownremovedConfig[prop] == "undefined") continue;  // Skip if undefined

                if (siteLinkTextBuilderConfig.skipIfTextTooLong == "YES" && ownremovedConfig[prop].textSchema.length > 25){continue;}
                var regex = new RegExp(adGroupObject.gender, "");

                var bcsitelinkString = ownremovedConfig[prop].textSchema.replace(regex, function(match) { return match.split(",")[k]; });
                var urlString = ownremovedConfig[prop].urlSchema.replace(" Unisex","").replace(regex, function(match) { return match.split(",")[k]; });

                // Edge case if multiple gender values with long category and brand name
                if(genderArray.length > 1 && bcsitelinkString > 25) {
                  var bcShortSitelinkString = bcsitelinkString.replace("Damen","D.").replace("Herren","H.").replace("Kinder","K.");
                  Logger.log("New string: " + bcsitelinkString);
                }
                var bcNewSitelinkString = bcShortSitelinkString ? bcShortSitelinkString : bcsitelinkString;

                // Prevent duplicate entries
                var skipEntry = false;
                for(var i=0; i<listBySingleValueObjects.length; i++) {
                  if(listBySingleValueObjects[i].siteLinkText == bcNewSitelinkString.substring(25,0)) skipEntry = true;
                }
                if(skipEntry === true) continue;

                listBySingleValueObjects.push({
                  siteLinkText : bcNewSitelinkString.substring(25,0),
                  siteLinkUrl : urlString
                });

              } catch(e){
                Logger.log("Specific error for " + prop + " : " + e); Logger.log(" ");
                continue;
              }
            } // END FOR IN config loop
          } // END FOR gender array loop
        } // END if gender > 0
      }

      // CASE 3: BG or B
      if(aggrType == "BG" || aggrType == "B"){

        var categoryArray = adGroupObject.category.split(",").slice(0,2);
        var genderArray = adGroupObject.gender.split(",").slice(0,2);
        var ownremovedConfig = siteLinkTextBuilderConfig.textBuilder;

        if(ownremovedAggrTypeArray[j] == "BM") {continue;} // Skip BM as giving soruce as it contains no schema

        if(categoryArray.length > 0 && genderArray.length == 1) {
          for (var k=0; k <categoryArray.length; k++) {
            if(categoryArray[k].length == 0) continue;

            for(var prop in ownremovedConfig) {
              try{
                if(prop == aggrType) continue;
                if(typeof ownremovedConfig[prop] == "undefined") continue;  // Skip if undefined

                if (siteLinkTextBuilderConfig.skipIfTextTooLong == "YES" && ownremovedConfig[prop].textSchema.length > 25){continue;}
                var regex = new RegExp(adGroupObject.category, "");

                var sitelinkString = ownremovedConfig[prop].textSchema.replace(regex, function(match) { return match.split(",")[k]; });
                var urlString = ownremovedConfig[prop].urlSchema.replace(regex, function(match) { return match.split(",")[k]; });

                // Prevent duplicate entries
                var skipEntry = false;
                for(var i=0; i<listBySingleValueObjects.length; i++) {
                  if(listBySingleValueObjects[i].siteLinkText == sitelinkString.substring(25,0)) skipEntry = true;
                }
                if(skipEntry == true) continue;

                listBySingleValueObjects.push({
                  siteLinkText : sitelinkString.substring(25,0),
                  siteLinkUrl : urlString // >> @TODO NEW: UrlHandler.getFinalUrl(urlPrefix, urlIdentFragment)
                });
              } catch(e){ continue;}
            } // END FOR IN config loop

          } // END FOR category array loop
        } // END if category > 0
      }

      // CASE 4: CG
      if(aggrType == "CG"){

        var brandArray = adGroupObject.brand.split(",").slice(0,2);
        var ownremovedConfig = siteLinkTextBuilderConfig.textBuilder;

        if(ownremovedAggrTypeArray[j] == "BM") {continue;} // Skip BM as giving soruce as it contains no schema

        if(brandArray.length > 0) {
          for (var k=0; k <brandArray.length; k++) {
            if(brandArray[k].length == 0) continue;

            for(var prop in ownremovedConfig) {
              try{
                if(prop == aggrType || prop == "B"){continue;}
                if(typeof ownremovedConfig[prop] == "undefined") continue;  // Skip if undefined

                if (siteLinkTextBuilderConfig.skipIfTextTooLong == "YES" && ownremovedConfig[prop].textSchema.length > 25){continue;}

                var regex = new RegExp(adGroupObject.brand, "");
                var sitelinkString = ownremovedConfig[prop].textSchema.replace(regex, function(match) { return match.split(",")[k]; });
                var urlString = ownremovedConfig[prop].urlSchema.replace(regex, function(match) { return match.split(",")[k]; });

                // Prevent duplicate entries
                var skipEntry = false;
                for(var i=0; i<listBySingleValueObjects.length; i++) {
                  if(listBySingleValueObjects[i].siteLinkText == sitelinkString.substring(25,0)) skipEntry = true;
                }
                if(skipEntry == true) continue;

                listBySingleValueObjects.push({
                  siteLinkText : sitelinkString.substring(25,0),
                  siteLinkUrl : urlString // >> @TODO NEW: UrlHandler.getFinalUrl(urlPrefix, urlIdentFragment)
                });
              } catch(e){ continue; }
            } // END for in config loop

          } // END FOR brand array loop
        } // END if brand > 0
      }

      break;
    } // END For loop ownremovedAggrTypeArray

    if(listBySingleValueObjects.length > 4) listBySingleValueObjects.length = 4;
    if(DEBUG_MODE == 1) {Logger.log("Sitelink data for " + adGroupObject.adGroup + " with length " + listBySingleValueObjects.length + " : " + JSON.stringify(listBySingleValueObjects)); Logger.log(" ");}
    var createdSitelinks = this.setAdGroupSitelinks(adgroup, adGroupObject, listBySingleValueObjects);
    var remainingSitelinks = maxNewSitelinks - createdSitelinks;

    return remainingSitelinks;
  }

  ///////
  /////// 5.1.2 createSitelinksByClicks
  /////// Every adgroup gets the top 10 adgroups by parent-node by clicks as sitelinks
  ///////

  /*
  * @param object adGroupObject
  * @param int maxNewSitelinks
  * @return int remainingSitelinks
  */
  this.createByClicks = function(adGroupObject, newSLsAfter1stRound){

    var listByClicks = [];
    var aggregationReference = this.determineAggregationReference(adGroupObject);

    var adGroupIterator = AdsApp.adGroups()
    .withCondition('CampaignName = "' + this.campaignName + '"')
    .withCondition('CampaignStatus != REMOVED')
    .withCondition('AdGroupName CONTAINS "_' + aggregationReference + '"')
    .withCondition("Status = ENABLED")
    .withCondition("Clicks > " + SITELINK_BUILDER_CONFIG.minClicksForTopAdGroups)
    .forDateRange(SITELINK_BUILDER_CONFIG.periodForClicks)
    .orderBy("Clicks DESC")
    .withLimit(SITELINK_BUILDER_CONFIG.maxAdGroupSitelinksPerType)
    .get();

    try{
      while (adGroupIterator.hasNext()) {
        var adgroup = adGroupIterator.next();
        var adGroupNameCleaned = adGroup.getName().replace("_"," ");

        listByClicks.push(
          {
            siteLinkText : adGroupNameCleaned.substring(25,0),
            siteLinkUrl : adGroupNameCleaned // >> @TODO NEW: UrlHandler.getFinalUrl(urlPrefix, urlIdentFragment)
          });
      }
      if(DEBUG_MODE == 1) {Logger.log("Found " + listByClicks.length + " top adgroups for given criteria. First item : " + listByClicks[0]);}
    } catch(e) {
      Logger.log("The adgroup fetch for " + adGroup.getName() + "returned no adGroups with min "  + SITELINK_BUILDER_CONFIG.minClicksForTopAdGroups + " clicks. Moving on...");
    }

    // Fetching the actual adGroup to create the found sitelinks
    try{
      var adGroupIterator = AdsApp.adGroups()
      .withCondition('CampaignName = "' + this.campaignName + '"')
      .withCondition('CampaignStatus != REMOVED')
      .withCondition('AdGroupName CONTAINS_IGNORE_CASE \"' + adGroupObject.adGroup + '\"')
      .get();
    }catch(e){ Logger.log("ParsingErrorInSelectorExpection: Specific error" + e + " . " + e.stack)}


    while (adGroupIterator.hasNext()) {
      var focusAdgroup = adGroupIterator.next();
      var createdSitelinks = this.setAdGroupSitelinks(focusAdgroup, adGroupObject, listByClicks);
      var remainingSitelinks = SITELINK_BUILDER_CONFIG.maxAmountAdGroupSitelink - createdSitelinks;
    }
    return remainingSitelinks;
  }

  /*
  * @param object adGroupObject
  * @return array aggregationReference, i.e. if brand, category, brand-cat or brand-gen
  */

  this.determineAggregationReference = function(adGroupObject) {

    var aggregationType = adGroupObject.aggregationType;
    var aggregationReference;

    // @ADDON: Special case for subcategory BCG: BC or BG?
    if(aggregationType.charAt(0) == "B"){
      aggregationReference = "brand";
    } else
      if (aggregationType.charAt(0) == "C") {
        aggregationReference = "category";
      }

    return aggregationReference;
  }



  ///////
  /////// 5.1.3 createBySaleCombinations
  ///////

  this.createBySaleCombinations = function(){} // @TODO use logic of 5.1.2 but add sale



  ///////
  /////// 5.1.5 Generic Builder Methods
  ///////

  /*
  * @param object adgroup
  * @param object adGroupObject
  * @param array sitelinkList
  * @return int createdSitelinks
  * @throws exception AdGroupNotFoundException
  * @throws exception NoSitelinkException
  */
  this.setAdGroupSitelinks = function(adgroup, adGroupObject, sitelinkList) {

    var createdSitelinks = 0;

    // StorageHandler.getIdExclusionStatement(adGroup, sitelinkList);

    var adGroupSitelinkIterator = adgroup.extensions().sitelinks().get();

    for (i = 0; i < sitelinkList.length; i++) {
      // CHECK if sitelink already exists @TODO: Write log service
      try{
        if(adGroupSitelinkIterator.totalNumEntities() > this.maxAddedAdGroupSitelinks) {
          Logger.log("The adGroup " +  adgroup.getName() + " has alreay reached the max amount of sitelinks"); Logger.log(" ");
          break;
        }
      } catch(e){
        Logger.log("NoSitelinkException: There are no sitelinks for"  +  adgroup.getName() + ". Starting creation ... "); Logger.log("Specific error : " + e);Logger.log(" ");
      }

      // Start creation of sitelink
      if(sitelinkList[i]){
        var singleSiteLinkObject = sitelinkList[i];
        createdSitelinks += this.createSingleSitelink(adgroup, adGroupObject, singleSiteLinkObject);
      }
    } // END FOR LOOP Sitelinklist

    return createdSitelinks;
  }



  /*
  * @param object adgroup
  * @param object adGroupObject
  * @param object singleSitelink
  * @return int creationResult
  * @throws exception SitelinkCreationEception
  */
  this.createSingleSitelink = function(adgroup, adGroupObject, singleSitelink) {

    var urlPrefix = this.getUrlPrefix();
    var prelimUri;

    if(URL_SCHEMA.sitelinkSearchUrl_wordsToRemove && URL_SCHEMA.sitelinkSearchUrl_wordsToRemove.length){
      prelimUri = this.cleanAndRemoveStopWords(singleSitelink.siteLinkUrl);
    }
    finalUri = prelimUri ? prelimUri : singleSitelink.siteLinkUrl;
    var finalUrl = urlPrefix + finalUri;

    if(URL_SCHEMA.sitelinkSearchUrlSuffix && URL_SCHEMA.sitelinkSearchUrlSuffix.length > 0) finalUrl = finalUrl + URL_SCHEMA.sitelinkSearchUrlSuffix;

    if(URL_SCHEMA.addParameters == "YES") {
      var urlParameters = this.getUrlParameters(adGroupObject.campaign);
      finalUrl += urlParameters;
    }

    var creationResult = 0;
    if(DEBUG_MODE == 1) {Logger.log("sitelink URL: " + finalUrl);}

    this.sitelinkBuilder = AdsApp.extensions().newSitelinkBuilder();

    try{
      var newSitelink = this.sitelinkBuilder
      .withLinkText(singleSitelink.siteLinkText)
      .withFinalUrl(finalUrl)
      .build()
      .getResult();

      var sitelinkOperation = adgroup.addSitelink(newSitelink);

      if (sitelinkOperation.isSuccessful()) {
        creationResult = 1;

        var sitelinkName = singleSitelink.siteLinkUrl.replace(/ |_/g,"_");

        // EGDE CASE CG & SALE: TIED to implementation that type CG uses SaleSuffix, cutting of salesuffix for clean sitelinkname
        var sitelinkNameClean;
        if(sitelinkName.indexOf("_Sale") != -1 && SITELINK_BUILDER_CONFIG.useDiscountPercentageInText == "YES") {
          sitelinkNameClean = sitelinkName.replace("_Sale","");
        } else {
          sitelinkNameClean = sitelinkName
        };

        var sitelinkCreationLogObject = {
          "id" : sitelinkOperation.getResult().getId(),
          "entityName" : sitelinkNameClean.toLowerCase(),
          "entityType" : "adGroupSitelink",
          "campaignName" : this.campaignName,
          "campaignId" : adgroup.getCampaign().getId(),
          "adgroupName" : adgroup.getName(),
          "adgroupId" : adgroup.getId(),
          "creationDate" : this.dateYmd,
          "status" : "enabled"
        };
        if(DEBUG_MODE == 1) {Logger.log("sitelinkCreationLogRow : " + JSON.stringify(sitelinkCreationLogObject));}
        SITELINK_CREATION_LOG.push(sitelinkCreationLogObject);
      } else {
        var siteLinkErrors = sitelinkOperation.getErrors();

        var errorRow = [TIME_STAMP, "Sitelink" , "Failed", siteLinkErrors, this.campaignName, adgroup.getName() , "", "", "", "", "", "", "", "", "", "","","",singleSitelink.siteLinkText,"","","",""];
        ERROR_LOG.push(errorRow);
        ERROR_SUMMARY_OBJECT.siteLinkErrorCount++;
        Logger.log("Sitelink Exception: The sitelink operation for sitelink " + singleSitelink.textSchema + " in " + adgroup.getName() + " showed an error. ");
      }

    } catch(e){
      Logger.log("SitelinkCreationEception: The sitelink " + singleSitelink.textSchema + " for "  +  adgroup.getName() + " could NOT be added.");
      Logger.log("Specific error : " + e + ". Stacktrace : " + e.stack); Logger.log(" ");
      ERROR_SUMMARY_OBJECT.siteLinkErrorCount++;
    }
    return creationResult;
  }

  /*
  * @return string urlPrefix
  */
  this.getUrlPrefix = function(){
    var urlPrefix;
    if(URL_SCHEMA.sitelinkSearchUrlPrefix && URL_SCHEMA.sitelinkSearchUrlPrefix.length > 0) {
      urlPrefix = URL_SCHEMA.sitelinkSearchUrlPrefix;
    } else urlPrefix = URL_SCHEMA.urlPrefix;
    return urlPrefix;
  }

  /*
  * @param string uri
  * @return string cleanedUri
  */
  this.cleanAndRemoveStopWords = function(uri){
    var cleanedUri = uri;

    for(var i=0; i < URL_SCHEMA.sitelinkSearchUrl_wordsToRemove.length; i++){
      var regexString = new RegExp(URL_SCHEMA.sitelinkSearchUrl_wordsToRemove[i], "i");
      cleanedUri = cleanedUri.replace(regexString, "");
    }

    cleanedUri = cleanedUri.replace(/ |_/g,"+").replace(/&|-/g,"").replace(/\+\+/g,"+");
    return cleanedUri;
  }

  /*
  * @param string campaignName
  * @return string dynUrlParamString
  */
  this.getUrlParameters = function(campaignName){
    var urlParameterString =  URL_SCHEMA.sitelinkSearchUrlPrefix.indexOf("?") == -1 ? "?":  "&" ;
    urlParameterString += URL_SCHEMA.urlParameters.replace("adGroup/keyword","sitelink");
    var regexString = new RegExp("campaign", "i");
    var dynUrlParamString = urlParameterString.replace(regexString, campaignName);

    return dynUrlParamString;
  }





  /*
  * @param object adgroup
  * @param object adgroupObject
  * @param object fallbackSitelink
  * @return int creationResult
  * @throws exception SitelinkCreationEception
  */
  this.createFallbackSitelink = function(adgroup, adGroupObject, fallbackSitelink) {

    this.sitelinkBuilder = AdsApp.extensions().newSitelinkBuilder();
    var fallbackSitelinkUrl = fallbackSitelink.url;

    if(URL_SCHEMA.addParameters == "YES"){
      var urlParameterString =  fallbackSitelink.url.indexOf("?") == -1 ? "?":  "&" ;
      urlParameterString += URL_SCHEMA.urlParameters.replace("adGroup/keyword","sitelink");
      var regexString = new RegExp("campaign", "i");
      var dynUrlParamString = urlParameterString.replace(regexString, adGroupObject.campaign);

      fallbackSitelinkUrl += dynUrlParamString;
    }

    var creationResult = 0;

    try{
      var newSitelink = this.sitelinkBuilder
      .withLinkText(fallbackSitelink.text)
      .withFinalUrl(fallbackSitelinkUrl)
      .build()
      .getResult();

      var sitelinkOperation = adgroup.addSitelink(newSitelink);

      if (sitelinkOperation.isSuccessful()) { creationResult = 1; }
      else {
        var siteLinkErrors = sitelinkOperation.getErrors();

        var errorRow = [TIME_STAMP, "Sitelink" , "Failed", siteLinkErrors, this.campaignName, adgroup.getName() , "", "", "", "", "", "", "", "", "", "","","",fallbackSitelink.text,"","","",""];
        ERROR_LOG.push(errorRow);
        ERROR_SUMMARY_OBJECT.siteLinkErrorCount++;
        Logger.log("Sitelink Exception: The sitelink operation for sitelink " + fallbackSitelink.text + " in " + adgroup.getName() + " showed an error.");
      }

    } catch(e){
      Logger.log("SitelinkCreationEception: The sitelink " + fallbackSitelink.text + " for "  +  adgroup.getName() + " could NOT be added.");
      Logger.log("Specific error : " + e +". Error message : " + e.message + ". Stacktrace : " + e.stack); Logger.log(" ");
      ERROR_SUMMARY_OBJECT.siteLinkErrorCount++;
    }
    return creationResult;
  }


  ///////
  /////// 5.2 SitelinkDateHandler: activates and pauses sitelinks by changing end date
  ///////
  /*
  * - update end dates via adgroupname-2-sitelinkName Converter with adgroups-to-be paused aus adgrouplist and sitelinkLookupName
  * - convert sitelinkLookupnsme in select-in statement for BigQuery Tabelle slNames-2-IDs with where statement enabled
  * - update sitelink status in bigquery
  * - BigQuery returns sitelinkID Array
  * - id array is split into 10k chunks and handed to selector as withId Statement to update end dates
  * - operation is captures as result, all errors are logged, errorArray is sent as statusReset Query to
  */


  /*
  * @param {array} adGroupList
  * @param {array} aggregationTypes
  * @return {array} sitelinkNames
  */
  this.convertAdGroupListToSitelinkNames = function(adGroupList, aggregationTypes) {

    var sitelinkNames = [];

    try{
    	if (typeof adGroupList !== "undefined"){
	    	for(var i=0; i < adGroupList.length; i++) {
	        // Loop through every aggregation type
	        var sitelinkName = adGroupList[i].replace("_Feed_BCG","").replace("_Feed_BC","").replace("_Feed_BM","").replace("_Feed_BG","").replace(/ /g,"_").toLowerCase();
	        sitelinkNames.push(sitelinkName);
	      }
    	}
    } catch(e){ Logger.log("AdGroup2SitelinkName_ConversionException: " + e  + ". stack : " + e.stack)}

  return sitelinkNames;
  }

  /*
  * @param {array} adGroupList, either toBePaused or to be activated
  * @param {bool} status, the
  * @param {object} storageHandler
  * @return {void}
  * @throws {exception} EmptyResponseException
  */
  this.setSitelinkEndDateByStatus = function(adGroupList, newStatus, storageHandler) {

    var oldStatus = newStatus == "enabled" ? "paused" : "enabled";

    var dateToday = this.dateYmd.replace(/-/g,"");
    var sitelinkNames = this.convertAdGroupListToSitelinkNames(adGroupList);
    Logger.log("Setting status " + newStatus + " (via end date change) to " + sitelinkNames.length + " sitelinkNames.");
    if(DEBUG_MODE == 1) {Logger.log("convertAdGroupListToSitelinkNames : " + sitelinkNames);}

    var sitelinkIds = [];

    try{
      if(sitelinkNames.length > 0){

        sitelinkIds = storageHandler.getSitelinkIdsByNameAndStatus(sitelinkNames, this.campaignName, "adGroup_sitelinks", oldStatus);

        // Only load sitelinks created by script and with min x impression in definded time range
        var sitelinkIterator = AdsApp.extensions().sitelinks()
        .withIds([ sitelinkIds.join(",") ])
        // .withCondition("Impressions > " + SITELINK_BUILDER_CONFIG.minImpressionsForDateHandler)
        // .forDateRange(SITELINK_BUILDER_CONFIG.periodOfImpressionsForDateHandler)
        // .orderBy("Impressions DESC")
        .get();

        while (sitelinkIterator.hasNext()) {
          var sitelink = sitelinkIterator.next();
          var endDateYmdByStatus = newStatus == "enabled" ? "" : dateToday;
          var sitelinkOperation = sitelink.setEndDate(endDateYmdByStatus);
          // if(sitelinkOperation.getErrors().length > 0) {Logger.log(sitelink.getId());}
        }
        // @TODO: reset status via storage handler if sitelinkoperation failed
      }

    } catch(e){
      Logger.log("EmptyResponseException: No sitelinks to be set to " + newStatus + "."); Logger.log("Specific error : " + e);
    }
 }

} // END SITELINK HANDLER






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 6. StorageHandler: saves and retrieves data from Google Sheet
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function StorageHandler(){

  /* Docs:
  * https://developers.google.com/adwords/scripts/docs/examples/google-bigquery
  * https://cloud.google.com/bigquery/docs/reference/rest/v2/
  * https://developers.google.com/apps-script/advanced/bigquery
  */

  this.projectId = 'feeddataaggregation';
  this.accountName = AdsApp.currentAccount().getName().replace(/[^a-zA-Z0-9 ]/g, "").replace(/ /g,"");
  this.accountId = AdsApp.currentAccount().getCustomerId().replace(/[^a-zA-Z0-9 ]/g, "");
  this.dataSetId = this.accountName + "_" + this.accountId + "_" + "nrFeedCampaign_EntityLog";

  /* Compound method to initialize database
  * @param {string} tableName
  * @param {array} fieldSchemaArray
  * @return {void}
  * @throws {error} BigQueryAuthorizationError
  */
  this.initDb = function(tableName, fieldSchemaArray){

    try{
      var queryRequest = BigQuery.newQueryRequest();
      var fullTableName = this.projectId + ':' + this.dataSetId + '.' + tableName;
      queryRequest.query = 'select * from [' + fullTableName + '] LIMIT 1;';
      var query = BigQuery.Jobs.query(queryRequest, this.projectId);

      Logger.log("BigQuery database '" + fullTableName + "' initialized.");
    } catch(e){
      try{
        this.createDataSet();
        this.createTable(tableName, fieldSchemaArray);

        var queryRequest = BigQuery.newQueryRequest();
        var fullTableName = this.projectId + ':' + this.dataSetId + '.' + tableName;
        queryRequest.query = 'select * from [' + fullTableName + '] LIMIT 1;';
        var query = BigQuery.Jobs.query(queryRequest, this.projectId);
        Logger.log("BigQuery database '" + fullTableName + "' initialized.");

      } catch(e2){
        throw new Error("BigQueryAuthorizationError: " + e2 + ". Stacktrace : " + e2.stack); Logger.log("If script is triggered by a non-norisk user, make sure to add the norisk-user as owner to grant BigQuery-UserAccess.");
      }
    }
  }

  /*
  * @param {string} projectId
  * @param {string} dataSetId
  * @return void
  * @throws {exception} DataSetCreationException
  */
  this.createDataSet = function() {

    try{
      var dataSet = BigQuery.newDataset();
      dataSet.id = this.dataSetId;
      dataSet.friendlyName = 'Entity creation log for clientID ' + this.accountId + " : " + this.accountName;
      dataSet.datasetReference = BigQuery.newDatasetReference();
      dataSet.datasetReference.projectId = this.projectId;
      dataSet.datasetReference.datasetId = this.dataSetId;
      dataSet = BigQuery.Datasets.insert(dataSet, this.projectId);

      Logger.log('Data set with ID = %s, Name = %s created.', dataSet.id, dataSet.friendlyName);
    } catch(e){
      Logger.log("DatasetCreationException: The dataSetId " + this.dataSetId + " already exists. ");
    }
  }

  /*
  * @param {string} tableName
  * @param {array} fieldSchemaArray
  * @return {void}
  * @throws {exception} TableCreationException
  */
  this.createTable = function(tableName, fieldSchemaArray) {

    try{
      var table = BigQuery.newTable();
      var schema = BigQuery.newTableSchema();
      schema.fields = fieldSchemaArray;

      table.schema = schema;
      table.id = tableName;
      table.friendlyName = 'Entity Creation Log for ' + tableName;

      table.tableReference = BigQuery.newTableReference();
      table.tableReference.datasetId = this.dataSetId;
      table.tableReference.projectId = this.projectId;
      table.tableReference.tableId = tableName;
      table = BigQuery.Tables.insert(table, this.projectId, this.dataSetId);

      Logger.log('Data table with ID = %s, Name = %s created.', table.id, table.friendlyName);
    } catch(e) {
      Logger.log("TableCreationException: The tableId " + tableName + " already exists. "); Logger.log(e);
    }
  }


  /* ABSTRACT METHOD FOR GENERIC USE
  * @return {array} fieldSchemaArray
  */
  this.generateFieldSchemaArray = function(){

   var fieldSchemaArray = [];

    // Specific sitelink table implementation
    var idFieldSchema = BigQuery.newTableFieldSchema();
    idFieldSchema.description = 'the adwords ID of the sitelink';
    idFieldSchema.name = 'id';
    idFieldSchema.type = 'STRING';

    var entityNameFieldSchema = BigQuery.newTableFieldSchema();
    entityNameFieldSchema.description = 'the name of the sitelink';
    entityNameFieldSchema.name = 'entityName';
    entityNameFieldSchema.type = 'STRING';

    var entityTypeFieldSchema = BigQuery.newTableFieldSchema();
    entityTypeFieldSchema.description = 'the entity type, ie adgroup, sitelink etc';
    entityTypeFieldSchema.name = 'entityType';
    entityTypeFieldSchema.type = 'STRING';

    var campaignNameFieldSchema = BigQuery.newTableFieldSchema();
    campaignNameFieldSchema.name = 'campaignName';
    campaignNameFieldSchema.type = 'STRING';

    var campaignIdFieldSchema = BigQuery.newTableFieldSchema();
    campaignIdFieldSchema.name = 'campaignId';
    campaignIdFieldSchema.type = 'STRING';

    var adgroupNameFieldSchema = BigQuery.newTableFieldSchema();
    adgroupNameFieldSchema.name = 'adgroupName';
    adgroupNameFieldSchema.type = 'STRING';

    var adgroupIdFieldSchema = BigQuery.newTableFieldSchema();
    adgroupIdFieldSchema.name = 'adgroupId';
    adgroupIdFieldSchema.type = 'STRING';

    var creationDateFieldSchema = BigQuery.newTableFieldSchema();
    creationDateFieldSchema.name = 'creationDate';
    creationDateFieldSchema.type = 'DATE';

    var updateDateFieldSchema = BigQuery.newTableFieldSchema();
    updateDateFieldSchema.name = 'updateDate';
    updateDateFieldSchema.type = 'DATE';

    var statusFieldSchema = BigQuery.newTableFieldSchema();
    statusFieldSchema.description = 'the entity status';
    statusFieldSchema.name = 'status';
    statusFieldSchema.type = 'STRING';

    var fieldSchemaArray = [idFieldSchema, entityNameFieldSchema, entityTypeFieldSchema, campaignNameFieldSchema, campaignIdFieldSchema, adgroupNameFieldSchema, adgroupIdFieldSchema, creationDateFieldSchema, updateDateFieldSchema, statusFieldSchema];

    return fieldSchemaArray;
  }


  /*
  * @param array createdEntitiesLog. an array of objects
  * @param string tableName
  * @return void
  * @throws exception EmptyRowRequest_Exception
  */
  this.writeRowstoStorage = function(createdEntitiesLog, tableName) {

    var insertAllRequest = BigQuery.newTableDataInsertAllRequest();
    insertAllRequest.rows = [];

    for(var i=0; i< createdEntitiesLog.length;i++){
      var newRow = BigQuery.newTableDataInsertAllRequestRows();
      newRow.insertId = createdEntitiesLog[i].sitelinkId;
      newRow.json = createdEntitiesLog[i];
      insertAllRequest.rows.push(newRow);
    }

    try{
      var result = BigQuery.Tabledata.insertAll(insertAllRequest, this.projectId, this.dataSetId, tableName);
    } catch(e){ Logger.log("EmptyRowRequest_Exception : No new created entities to log. " + e); Logger.log("Stacktrace: " + e);}

    try{
      if(result.insertErrors != null) {
        var allErrors = [];
        for (var i = 0; i < result.insertErrors.length; i++) {
          var insertError = result.insertErrors[i];
          allErrors.push(Utilities.formatString('Error inserting item: %s', insertError.index));

          for (var j = 0; j < insertError.errors.length; j++) {
            var error = insertError.errors[j];
            allErrors.push(Utilities.formatString('- ' + error));
          }
        }
        Logger.log(allErrors.join('\n'));
      } else if(DEBUG_MODE == 1) {Logger.log(Utilities.formatString('%s data rows inserted successfully.', insertAllRequest.rows.length)); Logger.log(" ");}
    } catch(e){Logger.log("InsertErrors_Exception : " + e + " . " + e.stack);}
  }



  /*
  * @param {array} whereClauseArray
  * @param {string} campaignName
  * @param {string} tableName
  * @param {string} status
  * @return {array} sitelinkIds
  * @throws {exception} EmptyResponseException
  */
  this.getSitelinkIdsByNameAndStatus = function(whereClauseArray, campaignName, tableName, oldStatus) {

    var queryFieldArray = ['id'];

    var queryRequest = BigQuery.newQueryRequest();
    var fullTableName = this.projectId + ':' + this.dataSetId + '.' + tableName;
    queryRequest.query = this.buildQueryByParameters(queryFieldArray, whereClauseArray, campaignName, oldStatus, fullTableName);
    var query = BigQuery.Jobs.query(queryRequest, this.projectId);

    var sitelinkIds = [];

    if (query.jobComplete) {
      try{
        for (var i = 0; i < query.rows.length; i++) {
          var row = query.rows[i];
          var values = [];
          for (var j = 0; j < row.f.length; j++) {
            values.push(row.f[j].v);
          }
          sitelinkIds.push(values);
        }
      } catch(e){Logger.log("EmptyResponseException : No sitelinkIds were returned for this sitelinkNameList."); Logger.log("Specific error : " + e); Logger.log(" ");}
    }

    Logger.log("sitelinkIds : " + sitelinkIds);

    // ex-ante update of bigQuery entity status before ads operation
    var newStatus = oldStatus == "enabled" ? "paused" : "enabled";
    // this.updateStatusInStorageById(sitelinkIds, newStatus, tableName);

    return sitelinkIds;
  }


  /*
  * @param {array} fieldArray
  * @param {array} whereClauseArray
  * @param {string} campaignName, status, fullTableName
  * @return {string} fullQuery
  */
  this.buildQueryByParameters = function(fieldArray, whereClauseArray, campaignName, status, fullTableName){

    var fullQuery = 'select ' + fieldArray +' from [' + fullTableName + '] WHERE status = "' + status + '" AND campaignName = "' + campaignName +
      '" AND entityName IN ("' + whereClauseArray.join('","') + '")';
    if(DEBUG_MODE == 1) {Logger.log("full SELECT Query: '" + fullQuery + "'");}

    return fullQuery;
  }


  /*
  * @param array entityIdArray an array of strings
  * @param string field, newStatus, tableName
  * @return void
  */
  this.updateStatusInStorageById = function(entityIdArray, newStatus, tableName) {

    var dateYmd = new Date().toISOString().substring(0, 10);
    var fullTableName = this.projectId + ':' + this.dataSetId + '.' + tableName;
    var fullQuery = 'UPDATE `' + fullTableName + '` SET status = "' + newStatus + '", updateDate = "'+ dateYmd + '" WHERE id IN ( "' + entityIdArray.join('","') + '")';
    Logger.log("updateStatusInStorageById : " + fullQuery);

    var queryRequest = BigQuery.newQueryRequest();
    queryRequest.useLegacySql = false;
    queryRequest.query = fullQuery;
    var query = BigQuery.Jobs.query(queryRequest, this.projectId);

    if (query.jobComplete) {

      Logger.log("updateStatusInStorage complete : " + entityIdArray.length + " ids updated to " + status);
    }
  }


} // END STORAGE HANDLER




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 7. UrlHandler: takes string and urlBuilderConfig object to generate URLs
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function UrlHandler() {

  /*
  * @return void
  * @throws error Missing
  */
  this.validateUrlSchema = function(){
    // see URL_SCHEMA for more cases
    /* Validation Cases
    * 1. urlString not in Feed
    * 2. If urlType ByObject and customUrlMethod not implemented
    * 3. If urlType "Custom_ByFeedString" and urlPrefix doesn't end in slash
    */
   }

  /*
  * @param object adGroupObject
  * @return string finalUrl
  * @throws exception InvalidUrlTypeException
  */
  this.createUrlByConfig = function(adGroupObject) {

    var finalUrl;

    try{
        switch(URL_SCHEMA.urlType) {
        case "Default_Search" : finalUrl = this.createSearchUrl(adGroupObject); break;
        case "Custom_ByObject" : finalUrl = this.createUrlByAdGroupObject(adGroupObject); break;
        case "Custom_ByFeedString" : finalUrl = this.createUrlByFeedString(adGroupObject); break;
        default: Logger.log("InvalidUrlTypeException: The value for is not one of the three: Default_Search, Custom_ByObject, Custom_ByFeedString"); break;
      }
      if (URL_SCHEMA.addParameters == "YES") {
       finalUrl += this.parseAndAppendUrlParameters(adGroupObject);
      }
    } catch(e){ Logger.log("InvalidUrlException : " + e + " . stack : " + e.stack);}

    if(DEBUG_MODE == 1) {Logger.log("urlHandler finalUrl : " + finalUrl);}
    return finalUrl;
  }

  /*
  * @description allows the replacement of three placeholder values {campaign}, {adgroup} and {keyword}
  * @param object adGroupObject
  * @return string urlParamString
  */
  this.parseAndAppendUrlParameters = function(adGroupObject) {

    //Declaring necessary variables.
    var urlParamTemplate = URL_SCHEMA.urlParameters;

    //Adding temporary keyword property to emulate mapping between "kwWithUnderscore" and "keyword".
    adGroupObject.keyword = adGroupObject.kwWithUnderscore;

    for (var j = 0; j < this.recognizedTemplateValues.length; j++) {
      var regexString = new RegExp(this.recognizedTemplateValues[j]);
      urlParamTemplate = urlParamTemplate.replace(regexString, adGroupObject[this.recognizedTemplateValues[j]]);
    }

    // Prepepend ? or & as needed
    if (URL_SCHEMA.urlPrefix.indexOf("?") == -1) {
      urlParamTemplate = "?" + urlParamTemplate;
    } else {
      urlParamTemplate = "&" + urlParamTemplate;
    }

    return urlParamTemplate.replace(/ /g,"_");
  }

  /*
  * @param object adGroupObject
  * @return string urlByFeedString
  * @throws error
  */
  this.createSearchUrl = function(adGroupObject) {

    var concatString = adGroupObject.kwWithUnderscore.replace(/ |_/g,"+").replace(/&|-/g,"").replace(/\|\|\|/g,"_");
    var encodedConcatString = URL_SCHEMA.UriEncodeSearchString == "YES" ? encodeURI(concatString) : concatString;
    var searchUrl = URL_SCHEMA.urlPrefix + encodedConcatString;

    return searchUrl;
  }

  /*
  * @param object adGroupObject
  * @return string urlByFeedString
  * @throws error MissingAdGroupObjectAttributeError
  */
  this.createUrlByFeedString = function(adGroupObject) {
    if(!adGroupObject["urlsuffix"]) {
      throw new Error("MissingAdGroupObjectAttributeError: the feed column for 'urlsuffix' is not found as an attribute in the adGroupObject. Please check your URL SCHEMA configuration.");
    }
    var urlByFeedString = URL_SCHEMA.urlPrefix + adGroupObject["urlsuffix"]; //.replace(/ |_/g,"+").replace(/&|-/g,"").replace(/\+\+/g,"+").replace(/\|\|\|/g,"_")
    return urlByFeedString;
  }

}

UrlHandler.prototype.evaluateParamSchema = function(adGroupObject) {
  var urlParamTemplate = URL_SCHEMA.urlParameters;
  var possibleTemplateValuesList = [];
  this.recognizedTemplateValues = [];

  //Adding temporary keyword property to emulate mapping between "kwWithUnderscore" and "keyword".
  //This allows the user to write "keyword" in url template instead of the ugly "kwWithUnderscore".
  adGroupObject.keyword = adGroupObject.kwWithUnderscore;

  //generating list of possible parameter placeholder
  //!!! This array should not be generated every time !!!!!
  for (var prop in adGroupObject) {
    possibleTemplateValuesList.push(prop);
  }

  //extracting parameter placeholders from url template
  for (var i = 0; i < possibleTemplateValuesList.length; i++) {
    if (urlParamTemplate.indexOf(possibleTemplateValuesList[i]) > -1) {
      this.recognizedTemplateValues.push(possibleTemplateValuesList[i]);
    } else {
      continue;
    }
  }
};// END URL HANDLER









/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// ADDON 7. UrlHandler: URL Creation by AdGroupObject
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




/* ABSTRACT METHOD by DEFAULT!
*
* @param object adGroupObject
* @return string finalUrl
* @throws error MissingImplementationError
*/
UrlHandler.prototype.createUrlByAdGroupObject = function(adGroupObject){
  // ABSTRACT METHOD by DEFAULT!
  throw new Error("MissingImplementationError: method urlHandler.createUrlByAdGroupObject is ABSTRACT by default, thus needs a client-specific implementation! ONLY remove if implemented and tested!");

  var finalUrl;
  var aggrType = adGroupObject.aggregationType;
  var adGroupNameSplit = adGroupObject.kwWithUnderscore.split("_");

  // Covered cases: BM, BCG, BC, C, CG
  if(aggrType == "BM") {
    finalUrl = URL_SCHEMA.urlPrefix /* TBD */;
  } else
  if(aggrType == "BCG") {
    finalUrl = URL_SCHEMA.urlPrefix/* TBD */;
  } else
  if(aggrType == "BC" || aggrType == "BG") {
    finalUrl = URL_SCHEMA.urlPrefix/* TBD */;
  } else
  if(aggrType == "C") {
    finalUrl = URL_SCHEMA.urlPrefix /* TBD */;
  } else
  if(aggrType == "CG") {
    finalUrl = URL_SCHEMA.urlPrefix /* TBD */;
  }

  // Defining ASCII string normalisation for URLs
  finalUrl = finalUrl.replace(/ /g,"").replace(/ä/g,"ae").replace(/ß/g,"ss").replace(/ü/g,"ue").replace(/ö/g,"oe").toLowerCase();

  return finalUrl;
}
